#line 2 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/commentscan.cpp"

#line 4 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/commentscan.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[759] =
    {   0,
       79,   79,  123,  123,  137,  137,  152,  152,  196,  196,
      143,  143,  206,  205,   46,  205,   46,  205,   45,  205,
       46,  205,   46,  205,   46,  205,   46,  205,   44,   46,
      205,   46,  205,   46,  205,   27,   46,  205,   46,  205,
       46,  205,   46,  205,   46,  205,   46,  205,   44,   46,
      205,   46,  205,   46,  205,   92,  205,   91,  205,   92,
      205,   89,   92,  205,   92,  205,   92,  205,  205,   93,
      205,  113,  205,  112,  205,  113,  205,  110,  113,  205,
      113,  205,   74,  205,   74,  205,   73,  205,   74,  205,
       74,  205,   74,  205,   70,   74,  205,   74,  205,   74,

      205,   78,  205,   77,  205,   78,  205,   75,   78,  205,
       78,  205,   78,  205,   78,  205,   82,  205,   81,  205,
       79,   82,  205,   79,   82,  205,   82,  205,   79,   82,
      205,   79,   82,  205,   82,  205,   74,  205,   73,  205,
       74,  205,   74,  205,   74,  205,   74,  205,   74,  205,
      101,  205,  100,  205,   98,  101,  205,  101,  205,  105,
      205,  104,  205,  105,  205,  105,  205,  109,  205,  108,
      205,  109,  205,  109,  205,   97,  205,   94,  205,   97,
      205,   95,   97,  205,   97,  205,   97,  205,   60,  205,
       59,  205,   60,  205,   57,   60,  205,   60,  205,   64,

      205,   64,  205,   63,  205,   64,  205,   64,  205,   64,
      205,   61,   64,  205,   64,  205,   64,  205,   68,  205,
       67,  205,   68,  205,   65,   68,  205,   68,  205,   85,
      205,   83,  205,  205,   87,  205,   88,  205,  205,  119,
      205,  118,  205,  117,  119,  205,  119,  205,  123,  126,
      205,  120,  205,  123,  126,  205,  126,  205,  126,  205,
      128,  205,  127,  205,  205,  131,  205,  131,  205,  129,
      205,  131,  205,  131,  205,  137,  141,  205,  138,  205,
      141,  205,  141,  205,  141,  205,  141,  205,  141,  205,
      116,  205,  114,  205,  116,  205,  150,  205,  150,  205,

      148,  205,  142,  150,  205,  147,  150,  205,  150,  205,
      153,  205,  152,  153,  205,  151,  205,  153,  205,  160,
      161,  205,  159,  205,  161,  205,  161,  205,  161,  205,
      171,  172,  205,  162,  205,  172,  205,  172,  205,  172,
      205,  175,  205,  173,  205,  175,  205,  179,  205,  177,
      205,  176,  179,  205,  179,  205,  182,  185,  205,  180,
      205,  183,  185,  205,  184,  185,  205,  185,  205,  185,
      205,  188,  205,  186,  205,  188,  205,  191,  205,  190,
      205,  191,  205,  189,  191,  205,  191,  205,  194,  205,
      193,  205,  194,  205,  192,  194,  205,  194,  205,   54,

       56,  205,   55,  205,   56,  205,   56,  205,  134,  205,
      133,  205,  132,  134,  205,  134,  205,   49,   50,  205,
       48,  205,   50,  205,   50,  205,  196,  198,  205,  197,
      205,  198,  205,  198,  205,  198,  205,  201,  205,  200,
      205,  199,  201,  205,  201,  205,  203,  204,  205,  202,
      205,  204,  205,  143,  205,  143,  146,  205,  144,  205,
      145,  205,   43,    4,   36,   38,   40,   38,   26,   26,
       18,   26,   18,   18,   24,   25,   20,   26,   27,   18,
       18,   18,   18,   30,   31,   36,   28,   89,   89,   90,
       89,   93,  110,  110,  111,   70,   70,   72,   70,   75,

       75,   76,   75,   79,   79,   79,   79,   79,   79,   80,
       79,   98,   99,  102,  103,  107,  106,  107,   95,   95,
       96,   95,   57,   57,   57,   58,   61,   61,   62,   61,
       65,   65,   66,   83,   84,   87,   86,  117,  123,  120,
      123,  125,  125,  122,  127,  130,  137,  140,  139,  115,
      142,  147,  149,  152,  151,  160,  171,  174,  176,  178,
      182,  181,  187,  189,  189,  192,  192,   54,  132,   49,
      196,  195,  199,  203,  143,   26,   37,   35,   42,   38,
       42,   42,   42,   38,   42,   42,   39,    6,   34,    1,
        1,    2,   18,   18,   22,   23,   20,    5,   18,   18,

       32,   35,   29,   89,   89,   70,   75,   75,   79,   79,
       79,   95,   95,   57,   57,   57,   57,   61,   65,  124,
       51,   52,   53,   47,  195,  199,   42,   42,   16,   33,
        1,   19,    2,   18,   18,   18,   89,   69,   75,   79,
       79,   71,   95,   57,   57,   57,   65,  124,  155,  163,
       47,  199,   15,   41,    6,   13,   18,   21,   18,   18,
       89,   75,   79,   95,    3,   14,    7,   18,   21,   18,
       18,   89,   75,   79,   95,   83,  157,  165,   18,   18,
       18,   89,   75,   79,   95,  136,  156,  154,  164,   18,
       18,   18,   89,   91,  112,   73,   75,   77,   79,   81,

      100,  104,  108,   94,   95,   59,   63,   67,   85,   88,
      118,  121,  128,  129,  135,  138,  114,  148,  158,  159,
      162,  173,  177,  180,  186,  190,  193,  133,   48,  197,
      200,  202,   12,    9,    8,   18,   18,    5,   18,  166,
       11,   10,   18,   18,   18,   18,  169,   17,   18,   17,
       18,  170,  167,   17,   18,  170,  168,   43
    } ;

static yyconst flex_int16_t yy_accept[1139] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   11,   11,   12,   13,   14,   15,   17,   19,   21,
       23,   25,   27,   29,   32,   34,   36,   39,   41,   43,

       45,   47,   49,   52,   54,   56,   58,   60,   62,   65,
       67,   69,   70,   72,   74,   76,   78,   81,   83,   85,
       87,   89,   91,   93,   95,   98,  100,  102,  104,  106,
      108,  111,  113,  115,  117,  119,  121,  124,  127,  129,
      132,  135,  137,  139,  141,  143,  145,  147,  149,  151,
      153,  155,  158,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  180,  182,  185,  187,  189,  191,  193,
      195,  198,  200,  202,  204,  206,  208,  210,  212,  215,
      217,  219,  221,  223,  225,  228,  230,  232,  234,  235,
      237,  239,  240,  242,  244,  247,  249,  252,  254,  257,

      259,  261,  263,  265,  266,  268,  270,  272,  274,  276,
      279,  281,  283,  285,  287,  289,  291,  293,  295,  297,
      299,  301,  303,  306,  309,  311,  313,  316,  318,  320,
      323,  325,  327,  329,  331,  334,  336,  338,  340,  342,
      344,  346,  348,  350,  352,  355,  357,  360,  362,  365,
      368,  370,  372,  374,  376,  378,  380,  382,  384,  387,
      389,  391,  393,  395,  398,  400,  403,  405,  407,  409,
      411,  413,  416,  418,  421,  423,  425,  427,  430,  432,
      434,  436,  438,  440,  442,  445,  447,  450,  452,  454,
      456,  459,  461,  463,  463,  463,  463,  463,  464,  464,

      464,  465,  465,  465,  465,  465,  465,  466,  467,  468,
      468,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      469,  469,  469,  469,  469,  470,  470,  471,  472,  473,
      474,  475,  476,  477,  479,  480,  481,  482,  483,  484,
      484,  484,  484,  484,  484,  484,  485,  486,  487,  487,
      488,  488,  488,  488,  488,  488,  489,  490,  490,  490,
      490,  491,  492,  492,  493,  494,  494,  495,  495,  495,
      496,  496,  496,  496,  496,  496,  497,  497,  497,  498,
      498,  498,  499,  499,  499,  499,  500,  500,  501,  502,
      502,  502,  502,  503,  504,  504,  505,  506,  506,  507,

      508,  509,  509,  509,  510,  510,  511,  512,  512,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  512,
      512,  513,  513,  514,  514,  514,  515,  515,  517,  517,
      517,  518,  518,  519,  519,  519,  520,  521,  521,  521,
      521,  522,  523,  524,  524,  524,  525,  525,  526,  526,
      527,  527,  527,  527,  527,  527,  528,  528,  528,  529,
      529,  530,  530,  530,  530,  531,  532,  532,  533,  533,
      534,  534,  535,  535,  535,  536,  536,  537,  537,  538,
      538,  539,  539,  540,  541,  542,  542,  543,  544,  544,
      545,  545,  546,  546,  546,  546,  546,  547,  547,  548,

      549,  550,  550,  550,  550,  551,  551,  551,  552,  553,
      553,  554,  554,  555,  556,  556,  556,  557,  557,  557,
      557,  558,  558,  558,  558,  558,  558,  558,  559,  559,
      560,  560,  561,  561,  562,  562,  563,  563,  563,  564,
      564,  565,  565,  566,  566,  566,  567,  567,  568,  568,
      568,  569,  569,  569,  570,  570,  571,  571,  571,  572,
      573,  573,  574,  574,  574,  575,  575,  576,  577,  577,
      577,  577,  577,  578,  579,  580,  582,  583,  584,  586,
      587,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      588,  589,  589,  589,  589,  589,  589,  590,  591,  592,

      593,  594,  595,  596,  597,  597,  598,  599,  600,  601,
      601,  601,  601,  601,  602,  603,  603,  604,  605,  605,
      606,  606,  606,  606,  606,  606,  607,  608,  608,  609,
      610,  610,  611,  611,  612,  612,  612,  612,  612,  612,
      612,  613,  613,  614,  615,  616,  617,  618,  618,  618,
      619,  619,  620,  620,  620,  620,  620,  620,  620,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  621,  621,  622,  623,  624,  624,
      624,  625,  625,  626,  626,  627,  627,  627,  627,  627,

      627,  627,  628,  629,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  630,  630,  631,  632,  633,
      634,  635,  635,  635,  636,  637,  637,  637,  637,  638,
      638,  638,  639,  639,  639,  640,  641,  641,  642,  643,
      643,  643,  643,  644,  644,  645,  646,  647,  647,  647,
      648,  648,  648,  648,  648,  648,  649,  649,  649,  649,
      649,  649,  649,  649,  649,  649,  649,  650,  650,  650,
      650,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  652,  652,  652,  653,  653,  653,
      653,  654,  654,  654,  655,  655,  655,  655,  655,  655,

      655,  657,  657,  657,  657,  658,  659,  660,  661,  661,
      662,  662,  662,  663,  664,  664,  664,  664,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  666,  667,  667,  667,  667,
      667,  668,  668,  668,  668,  668,  669,  670,  671,  672,
      673,  673,  673,  674,  675,  675,  675,  675,  676,  676,
      676,  676,  676,  676,  677,  677,  677,  677,  677,  677,

      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  678,  678,  678,  678,
      678,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  680,  681,
      682,  683,  683,  683,  684,  685,  685,  685,  685,  686,
      686,  686,  686,  686,  686,  686,  686,  686,  686,  686,
      686,  686,  686,  686,  686,  686,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  688,  689,  689,  689,  690,
      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,

      690,  690,  690,  690,  690,  690,  690,  690,  690,  690,
      690,  690,  691,  692,  693,  695,  696,  697,  699,  701,
      702,  703,  704,  706,  707,  708,  709,  710,  711,  712,
      713,  714,  715,  715,  716,  716,  716,  716,  716,  716,
      716,  716,  717,  718,  719,  720,  721,  721,  721,  721,
      721,  721,  722,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  733,  733,  733,  734,  735,  736,
      737,  738,  739,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  741,  741,  741,  742,  743,  743,
      743,  744,  744,  745,  745,  745,  745,  745,  745,  745,

      745,  745,  745,  745,  745,  745,  746,  746,  747,  747,
      747,  747,  747,  747,  747,  748,  748,  748,  750,  750,
      752,  752,  752,  753,  754,  754,  756,  756,  756,  757,
      757,  757,  757,  757,  757,  758,  759,  759
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   38,   39,   40,
       32,   41,   32,   42,   43,   32,   32,   32,   32,   32,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   32,   57,   58,   59,   60,
       61,   62,   32,   63,   64,   65,   66,   67,   68,   69,
       70,   32,   71,   72,   73,   74,    1,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75
    } ;

static yyconst YY_CHAR yy_meta[76] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,    1,   24,    1,   25,   23,   23,   23,
       23,   23,   23,   23,   23,   26,   23,   23,   23,   27,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       28,   29,   30,   31,   32
    } ;

static yyconst flex_uint16_t yy_base[1371] =
    {   0,
        0,    0,    0,   74,  146,  220, 4989, 4981,  294,    0,
      369,    0,  444,  518,  592,  666,  740,    0,  815,    0,
       74,   75,   77,   80,  890,  964, 1038,    0, 1113,    0,
     1188,    0, 1263,    0,   87,   90, 1338,    0,   91,   95,
     1413,    0,  109,  121,  158,  183,   82,   96, 1488, 1563,
      128,  140,  190,  205,  237,  243,   99,  112, 1638,    0,
      244,  452,  131,  134, 1713,    0, 1788,    0,  234,  449,
      456,  458, 1863,    0,  196,  463,  467,  469, 1938, 2012,
      135,  136,  193,  246, 4978, 9591, 9591,  500,  209, 4969,
     4966, 4948,  181,  531, 2081, 2140,  551, 2207, 2280,   98,

      250,  616,  690,  478,  624, 9591, 9591, 4966,  468,  488,
     1503, 4969, 9591, 9591, 9591,    0,   90,  553, 9591,  695,
      914,  920,  937, 4917,  994,  576,  269, 9591, 9591, 4929,
      542,  609, 4910, 1578, 9591, 9591, 2352, 1512, 1587, 1951,
     9591, 2043,  998, 1002, 1985, 2089, 4911, 1963,  281, 9591,
     9591,    0,  583, 9591, 9591, 4926,  647, 9591, 9591, 4919,
      654, 9591, 9591, 4918,  908, 1497, 2136, 9591, 9591,    0,
     2166,  945, 9591, 1975, 2037, 2099, 2203, 4896, 2049, 1538,
      717, 9591, 9591,    0, 4899, 1544, 9591, 4898, 1551,    0,
     9591, 1997, 9591, 9591,    0, 4868,  537, 9591, 4869, 2219,

     2002, 9591,    0, 4866, 9591,  469, 9591, 4875, 4831,    0,
     9591, 9591, 4858, 4862, 4823,  131, 9591, 9591, 2071, 9591,
      275, 9591, 9591,  607, 2125, 9591,  641, 9591, 4824,    0,
     9591, 9591,   54,  528,    0, 9591, 9591,  672,  967, 9591,
     9591, 2175, 9591, 9591,    0, 2192,    0, 9591, 9591, 9591,
     9591, 2199, 9591, 9591, 2232, 9591, 9591,    0,  164, 4822,
     9591, 9591,    0,  244, 4821,    0, 9591, 4814, 4813, 9591,
     9591,    0, 4818,    0, 9591, 4847, 4816,    0, 9591, 9591,
     4788,  120, 9591, 9591, 4843, 4813,    0, 9591, 4812,    0,
        0, 9591, 9591,  629, 2419, 2486,  988, 2245, 4811, 4850,

     9591,    0, 4833, 4828,    0,  199,  512, 9591, 9591, 2560,
     4827,  548, 4830,  669, 1490,   71,  562,  216,  516, 2264,
      587,  604, 4794, 4779, 9591, 4827,  607, 2634, 4766, 4778,
      901, 9591, 9591,    0, 1596,  979, 2151, 2251, 2263, 2707,
      565, 2269,  712,  936, 2312,  643, 2313, 2321, 1025, 9591,
     1598, 2360, 2346, 2385, 4830, 9591, 2052,  888, 2180, 1522,
     9591, 2376, 4830, 9591,  536, 4822,  635, 4807, 1590, 9591,
     4771, 2433, 2444, 4805, 2456, 2480, 1624, 2517, 2484, 2075,
     2317, 9591, 4769, 2401, 2410, 4802, 4818, 9591, 2239, 2090,
     2327, 2337, 9591, 2505, 4817,  485, 2779, 2853, 4816, 9591,

     2574, 2139, 2593, 4815, 2386, 9591, 2603, 2511, 2660, 4792,
     2668, 2692, 2539, 2735, 2743,    0, 2803, 2549, 2585,  947,
        0, 2437, 9591, 4756, 4806, 9591, 2473, 9591, 4751, 4800,
     9591, 2544, 9591, 4748, 4798, 9591, 2482, 2264, 2584, 2593,
     9591, 2631, 2697, 2767,    0, 2808, 4780, 2880, 2612, 9591,
     4744, 2838, 2905, 4777, 2913, 2888, 2773, 2930, 2938, 2622,
     9591, 4741, 2830, 2942,    0, 4780, 4788, 4778, 2650, 9591,
     4737, 4776, 4737, 2679, 9591, 4733,    0, 2685, 9591, 4727,
        0, 4726, 2329, 9591, 4738, 4735, 9591, 4769, 2711, 9591,
     4718,    0, 4717, 1597, 4767, 4764, 9591, 4710,    0, 9591,

     9591, 4707, 4708, 2754, 9591, 4707, 2094, 9591, 2461, 2760,
     9591, 4703, 2842, 9591, 4679, 4667,    0,  419, 4671, 4665,
        0, 4656, 4662, 4661,  846, 4649, 2817, 9591, 4648,    0,
     2947, 9591, 4647,    0, 2952, 9591, 4646, 2957, 9591, 4645,
      707, 4663, 1500, 4644, 4599, 1521, 4647, 1597, 4632, 4596,
        0, 4643,  631,    0, 4593,    0,  677, 4592,    0,    0,
     4591, 4630,    0, 4583,    0, 4580,    0, 4584, 4578, 4611,
        0, 4613, 1550, 4601, 9591, 9591, 4591, 3004, 4590, 4597,
     9591, 4597, 1495, 4560, 4545, 1933,  900, 2236,  980, 2308,
     9591, 2002, 1940, 1957, 4551, 4550, 4591, 2124, 2962,    0,

     2174, 2265, 9591, 9591,    0,    0,    0, 2979, 2749, 2971,
     2218, 2948, 2975, 9591, 3029, 3034, 2271, 3022, 3035, 3041,
        0, 4542, 3066, 3079, 4541, 4572, 3043, 3071, 3077, 1503,
     3133, 3080, 3105, 3141, 4581, 2618, 2635, 4533, 4528, 4525,
     3091, 3108, 3144, 3171, 3179, 3206, 3214, 4524, 4523,    0,
        0, 4559, 4518, 4506, 4514, 4513, 4512,    0,    0, 4508,
     4506, 4505, 4509, 4503, 4502, 4501, 4500, 4491, 4503, 4493,
     4496, 4500, 2844, 4487, 4499, 4469, 3626, 3625, 3621, 3617,
     3616,    0, 3615,    0, 3612, 9591, 9591, 9591, 3611, 3640,
     2326, 3605,    0, 3601, 3638, 3595, 3590, 2096, 3588, 3631,

        0, 3207, 2415, 9591, 2130, 3563, 3556,  863, 2188, 3589,
     2531, 2215, 2762, 2116, 3565, 3549, 9591, 2450, 9591,    0,
     2970, 3528, 3551, 3127, 3193, 3237, 3241, 3245, 3233, 3534,
     3116, 9591, 3270, 3525, 3247, 3317, 3391, 3283, 9591, 3519,
     3517, 3512, 3265,    0, 3277, 3344, 3371, 3509, 3495, 3535,
     3484, 3483, 3474, 3467, 3465,    0, 3461, 3459, 3443, 3362,
     3439, 3433, 3424, 3417, 3419, 3410, 9591, 3398, 3398, 3392,
     9591, 3383, 3394, 3369, 3368, 3366, 3362, 3339, 3327, 3317,
     3311, 3298, 3294, 2475, 3290, 3285, 3326, 3279, 3278, 3272,
     9591, 3302, 3342, 9591, 3291, 3263, 3246, 2265, 2984, 3289,

     9591, 2348, 3241, 3255, 3310, 3225, 2868, 3379, 3438, 3333,
     3237, 3235, 3400, 3431, 3233, 3225, 3224, 3428, 3465, 3217,
     3215, 3211, 3203, 3207, 3205, 3203, 3201, 3193, 3189, 3171,
     3170, 3165, 3173,  931, 3148, 3153, 2454, 3144, 3149, 3138,
     3133, 3118, 3109, 3108, 3090, 3102,  115, 3079, 3063, 3059,
     2029, 3061, 3055, 3050, 3041, 3040, 3033, 3022, 3021, 3020,
     3013, 3011, 2992, 2986, 2989, 9591, 2940, 2953, 2370, 3377,
     9591, 2972, 3381, 2938, 2928, 2991, 9591, 3455, 3470, 3471,
     2941, 2916, 3473, 3488, 2914, 2909, 2889, 3479, 3527, 3536,
     2888, 2881, 2880, 9591, 2872, 2870, 2863, 2856, 2847, 2846,

     2843,  150, 2829, 2821, 2821, 2830, 2826, 2817, 2811, 2817,
     2806, 2799, 2789, 2788, 2787, 9591, 2774,    0,    0, 2769,
     9591, 2751, 2560, 2751, 2740, 2724, 2719, 2711, 2701, 2700,
     2694, 2692, 2687, 2682, 2678, 2662, 2654, 2649, 2644, 2643,
     2628, 2617, 2373, 2650, 3428, 2610, 2598, 2721, 3507, 3521,
     3542, 2604, 2603, 3544, 3557, 2594, 2593, 2588, 3565, 2583,
     2578, 2550, 2546, 2545, 2538, 2519, 2517, 2492, 2493, 2488,
        0, 2474, 2473, 2456, 2438, 9591, 2442, 2423, 2409, 2406,
     2405, 2391, 2387,    0, 9591, 9591, 2378, 2380, 9591, 2374,
     2356, 2342, 2337, 2329, 2320, 2310, 2304, 2297, 2292, 2286,

     2274, 2241, 2236, 2225, 2212, 2192, 2187, 2179, 3476, 2211,
     2185, 3106, 2980, 3541, 3572, 9591, 9591, 3574, 3593, 9591,
     9591, 9591, 3580, 9591, 9591, 9591, 9591, 9591, 9591, 9591,
     9591, 9591, 2139, 9591, 2130, 2121, 2100, 2074, 2085, 2072,
     2059, 9591, 9591, 9591, 9591, 9591, 2051, 2027, 2730, 2013,
     2011, 9591, 9591, 9591, 9591, 9591, 9591, 9591, 9591, 9591,
     9591, 9591, 9591, 2009, 2008, 3549, 9591, 9591, 9591, 3367,
     2997, 1985, 3576, 1940, 1937, 1930, 1914, 1902, 1894, 1573,
     1572, 1561, 1564, 9591, 1529, 1534, 9591, 9591, 1520, 3604,
     3166,  223, 3621, 1452,  974,  966,  952,  945,  929,  883,

      851,  872, 2794,  841,  664, 3566,  930, 3625,  666,  653,
      629,  602,  583,  451, 9591, 3194,  429, 3332,  562, 3629,
      413,  191, 3406, 9591,  190, 3477,  568,  116, 3503,   58,
      490,   16, 3512, 2019, 9591, 3630, 9591, 3683, 3715, 3747,
     3779, 3811, 3843, 3875, 3907, 3939, 3971, 4003, 4035, 4067,
     4099, 4131, 4163, 4195, 4227, 4259, 4291, 4323, 4355, 4387,
     4419, 4451, 4483, 4515, 4540, 4560, 4577, 4598, 4617, 4638,
     4669, 4695, 4727, 4737, 4754, 4785, 4816, 4847, 4879, 4905,
     4937, 4964, 4995, 5026, 5057, 5075, 5107, 5139, 5171, 5197,
     5207, 5238, 5269, 5300, 5331, 5341, 5358, 5376, 5408, 5426,

     5458, 5490, 5521, 5538, 5570, 5602, 5633, 5660, 5692, 5710,
     5742, 5752, 5769, 5779, 5796, 5828, 5846, 5878, 5910, 5930,
     5962, 5994, 6020, 6051, 6061, 6076, 6096, 6109, 6136, 6146,
     6163, 6178, 6204, 6231, 6257, 6283, 6315, 6332, 6357, 6388,
     6419, 6450, 6482, 6497, 6529, 6555, 6581, 6613, 6645, 6672,
     6698, 6729, 6760, 6791, 6823, 6854, 6872, 6904, 6936, 6968,
     6994, 7020, 7051, 7061, 7092, 7123, 7154, 7185, 7200, 7217,
     7242, 7260, 7292, 7310, 7342, 7374, 7399, 7417, 7449, 7481,
     7512, 7539, 7571, 7589, 7621, 7638, 7663, 7680, 7705, 7737,
     7755, 7787, 7819, 3622, 7839, 7854, 7886, 7918, 7933, 7965,

     7983, 7998, 8025, 8057, 8088, 3616, 8114, 8141, 8159, 3627,
     8185, 8206, 8232, 8242, 8274, 8289, 8315, 8341, 8373, 8400,
     8427, 8459, 8490, 8516, 8542, 8573, 8604, 8635, 8650, 8660,
     8677, 8687, 8702, 8734, 8744, 8754, 3632, 8774, 8806, 8824,
     8841, 8868, 3637, 8899, 8926, 8936, 8962, 8988, 9011, 9043,
     9069, 9101, 9128, 9154, 9164, 9195, 9226, 9243, 9258, 9276,
     9303, 9334, 9366, 9398, 9430, 9462, 9494, 9526, 9558, 3653
    } ;

static yyconst flex_int16_t yy_def[1371] =
    {   0,
     1138, 1138, 1137,    3, 1139, 1139, 1140, 1140, 1137,    9,
     1137,   11, 1141, 1141, 1142, 1142, 1137,   17, 1137,   19,
     1143, 1143, 1144, 1144, 1145, 1145, 1137,   27, 1137,   29,
     1137,   31, 1137,   33, 1146, 1146, 1137,   37, 1147, 1147,
     1137,   41, 1148, 1148, 1149, 1149, 1150, 1150, 1151, 1151,
     1152, 1152, 1153, 1153, 1154, 1154, 1155, 1155, 1137,   59,
     1156, 1156, 1157, 1157, 1137,   65, 1137,   67, 1158, 1158,
     1158, 1158, 1137,   73, 1159, 1159, 1160, 1160, 1161, 1161,
     1162, 1162, 1163, 1163, 1137, 1137, 1137, 1137, 1137, 1164,
     1165, 1166, 1166, 1167, 1137, 1168, 1169, 1170, 1137, 1137,

     1166, 1166, 1167, 1166, 1137, 1137, 1137, 1171, 1172, 1172,
     1172, 1173, 1137, 1137, 1137, 1174, 1175, 1137, 1137, 1137,
     1137, 1176, 1176, 1137, 1177, 1137, 1178, 1137, 1137, 1179,
     1180, 1180, 1137, 1180, 1137, 1137, 1181, 1182, 1182, 1182,
     1137, 1182, 1137, 1137, 1183, 1183, 1137, 1184, 1185, 1137,
     1137, 1186, 1137, 1137, 1137, 1187, 1137, 1137, 1137, 1188,
     1137, 1137, 1137, 1189, 1190, 1190, 1190, 1137, 1137, 1191,
     1192, 1137, 1137, 1137, 1137, 1193, 1193, 1137, 1194, 1137,
     1195, 1137, 1137, 1196, 1197, 1137, 1137, 1198, 1137, 1199,
     1137, 1137, 1137, 1137, 1200, 1137, 1201, 1137, 1202, 1137,

     1203, 1137, 1204, 1137, 1137, 1137, 1137, 1205, 1137, 1206,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1207, 1137, 1137, 1207, 1137, 1137, 1137, 1137, 1137, 1208,
     1137, 1137, 1137, 1137, 1209, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1210, 1137, 1211, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1212, 1213, 1137,
     1137, 1137, 1214, 1215, 1137, 1216, 1137, 1137, 1137, 1137,
     1137, 1217, 1137, 1218, 1137, 1137, 1137, 1219, 1137, 1137,
     1137, 1137, 1137, 1137, 1220, 1137, 1221, 1137, 1137, 1222,
     1222, 1137, 1137, 1137, 1223, 1223, 1137, 1137, 1137, 1224,

     1137, 1225, 1226, 1227, 1228, 1137, 1227, 1137, 1137, 1229,
     1227, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1230, 1223, 1230,  328,
      328, 1137, 1137, 1231, 1232, 1233, 1233, 1233, 1233, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1227, 1137, 1137,
     1227, 1227, 1137, 1137, 1234, 1137, 1235, 1236, 1235, 1137,
     1137, 1235, 1237, 1137, 1238, 1239, 1238, 1137, 1137, 1137,
     1137, 1137, 1240, 1137, 1240, 1241, 1242, 1240, 1241, 1243,
     1137, 1137, 1137, 1242, 1242, 1244, 1245, 1137, 1246, 1247,
     1246, 1137, 1137, 1246, 1248, 1248, 1249, 1249, 1248, 1137,

     1250, 1251, 1250, 1248, 1137, 1137, 1250, 1137, 1252, 1137,
     1252, 1253, 1254, 1252, 1137, 1255, 1253, 1254, 1254, 1256,
     1257, 1137, 1137, 1137, 1258, 1137, 1137, 1137, 1137, 1259,
     1137, 1137, 1137, 1137, 1260, 1137, 1261, 1262, 1261, 1137,
     1137, 1261, 1263, 1137, 1264, 1263, 1137, 1265, 1137, 1137,
     1137, 1137, 1266, 1137, 1266, 1267, 1268, 1266, 1267, 1137,
     1137, 1137, 1268, 1268, 1269, 1270, 1271, 1270, 1137, 1137,
     1137, 1272, 1137, 1137, 1137, 1137, 1273, 1137, 1137, 1137,
     1274, 1137, 1275, 1137, 1276, 1137, 1137, 1277, 1137, 1137,
     1137, 1278, 1137, 1137, 1279, 1279, 1137, 1137, 1280, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1281, 1137, 1281, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1282, 1137, 1137, 1137,
     1283, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1284,
     1137, 1137, 1137, 1285, 1137, 1137, 1137, 1137, 1137, 1137,
     1286, 1287, 1286, 1137, 1137, 1288, 1289, 1288, 1137, 1137,
     1290, 1137, 1137, 1291, 1137, 1292, 1137, 1137, 1293, 1294,
     1137, 1295, 1296, 1137, 1297, 1137, 1298, 1137, 1137, 1299,
     1300, 1301, 1137, 1302, 1137, 1137, 1302, 1303, 1302, 1301,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1304,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1305, 1305, 1306,

     1137, 1307, 1137, 1137, 1308, 1309, 1310, 1311, 1311, 1137,
     1137, 1137, 1137, 1137, 1302, 1137, 1137, 1312, 1312, 1313,
     1314, 1137, 1315, 1315, 1137, 1316, 1317, 1317, 1318, 1137,
     1319, 1320, 1320, 1321, 1322, 1137, 1323, 1137, 1137, 1137,
     1324, 1324, 1325, 1326, 1327, 1328, 1328, 1137, 1137, 1329,
     1330, 1331, 1137, 1137, 1137, 1137, 1137, 1332, 1333, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1334,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1335, 1137, 1336, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1337, 1137, 1338, 1137, 1137, 1137, 1137, 1339,

     1340, 1341, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1342,
     1342, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1343,
     1344, 1345, 1346, 1347, 1347, 1137, 1137, 1348, 1349, 1137,
     1350, 1137, 1350, 1137, 1351, 1352, 1352, 1353, 1137, 1137,
     1137, 1137, 1354, 1355, 1356, 1356, 1357, 1137, 1137, 1358,
     1137, 1137, 1137, 1137, 1137, 1359, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1338, 1137, 1137, 1137,
     1137, 1360, 1341, 1137, 1137, 1137, 1137, 1137, 1137, 1361,

     1137, 1137, 1137, 1137, 1344, 1137, 1347, 1347, 1137, 1349,
     1137, 1137, 1351, 1353, 1137, 1137, 1137, 1354, 1362, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1363, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1360, 1137, 1137, 1137, 1137, 1364,
     1137, 1361, 1361, 1137, 1137, 1344, 1137, 1347, 1347, 1349,
     1137, 1137, 1351, 1353, 1137, 1137, 1137, 1354, 1362, 1362,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1365, 1366, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1364, 1364, 1137, 1137, 1344, 1347, 1347,
     1349, 1137, 1137, 1351, 1353, 1137, 1137, 1137, 1354, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1367, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1368, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1344, 1347, 1347, 1349, 1137, 1137, 1351, 1353, 1137,
     1137, 1137, 1354, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1369, 1137, 1137, 1137, 1344,
     1137, 1370, 1347, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1369, 1369,
     1344, 1370, 1347, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1344, 1370, 1347, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1344, 1370, 1347,
     1137, 1137, 1137, 1137, 1137, 1137, 1370, 1137, 1137, 1137,
     1370, 1137, 1137, 1370, 1137, 1370,    0, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137
    } ;

static yyconst flex_uint16_t yy_nxt[9667] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
       92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   87,   98,   87,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       87,   87,   87,   87,   87,   99,  155,  155,   99,  159,
      156,  156,  159,  160,  218,  971,  160,  100,  101,  191,
      102,  103,  191,  198,  104,  104,  105,  198,  218,  346,

       86,  241,  346,   86,  199,  518,  588,  366,  199,  519,
      206,  207,  368,  206,  241,  208,  200, 1133,  157,  157,
      200,  161,  206,  207,  161,  206,  219,  208,  588,  227,
      228,  192,  227,  254,  192,  201,  254,  288,  288,  201,
      219,  227,  228,  242,  227,  105,  106,  106,  107,  106,
      106,  106,  108,  209,  106,  106,  242,  106,  106,  106,
      211,  106,  212,  106,  110,  209,  561,  921,  110,  106,
      106,  213,  229, 1132,  922,  255,  214,  503,  255,  289,
      289,  542,  502,  215,  229,  211,  544,  212,  306,  106,
      111,  106,  231,  560,  232,  291,  213,  307,  275,  970,

      573,  214,  216,  573,  292,  293,  305,  231,  215,  232,
      297,  298,  276,  297,  971,  233,  106,  106,  106,  106,
      106,  106,  107,  106,  106,  106,  108,  216,  106,  106,
      233,  106,  106,  106,  234,  106,  267,  106,  110,  236,
      277,  237,  110,  106,  106,  236,  248,  237,  291,  234,
     1130,  346,  589,  299,  346,  249,  250,  292,  293,  268,
      971,  547,  238,  106,  111,  106,  549,  607,  238,  251,
      384,  384,  384,  384,  589,  305,  507,  385,  268,  507,
     1107,  239,  418,  418,  418,  418,  508,  239,  252,  419,
      106,  106,  106,  106,  114,  114,  115,  114,  114,  114,

      114,  114,  116,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  114,  118,  114,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  114,  114,  114,  114,  117,  119,
      120,  121,  120,  120,  119,  119,  119,  122,  119,  119,
      119,  119,  119,  119,  119,  119,  123,  119,  119,  119,
      119,  124,  119,  119,  119,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  119,  126,  119,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  119,
      119,  119,  127,  125,  128,  128,  129,  128,  128,  128,
      130,  267,  128,  128,  248,  128,  128,  128,  267,  128,
      267,  128,  132,  249,  250,  275,  132,  133,  128,  279,
      494,  279, 1128,  494,  268,  495,  668,  251,  669,  276,
      280,  269,  280,  269, 1125,  358,  359,  128,  134,  128,
      359,  630,  281,  268,  281,  351,  252,  352,  352,  352,

      269,  294,  269,  305,  294, 1137,  359,  277, 1123,  399,
      359,  282,  359,  282,  128,  128,  128,  128,  128,  128,
      129,  128,  128,  128,  130,  295,  128,  128,  574,  128,
      128,  128,  359,  128,  607,  128,  132,  305, 1134,  484,
      132,  133,  128,  308,  296,  304,  309,  304,  310,  581,
      485,  588,  581,  366,  369,  370,  305,  369,  368,  390,
      391,  128,  134,  128,  391,  304,  346,  304,  304,  346,
      304,  304,  304,  588,  520,  312,  305,  381,  382,  518,
      381,  486,  588,  519,  422,  423,  391,  422,  128,  128,
      128,  128,  135,  135,  136,  135,  135,  135,  137,  371,

      135,  135,  588,  135,  135,  135,  607,  135, 1137,  135,
      139, 1137,  607,  594,  139,  140,  141,  347, 1137, 1131,
      347, 1127,  383,  306,  588,  353, 1137,  391,  353,  424,
      294,  391,  348,  294,  594,  135,  142,  135,  345,  588,
      354,  305,  513,  514,  346,  513,  345,  346,  427,  428,
      971,  427,  366,  391,  295,  432,  433,  368,  432,  599,
      971,  588,  135,  135,  135,  135,  135,  135,  136,  135,
      135,  135,  137,  296,  135,  135,  687,  135,  135,  135,
      600,  135,  690,  135,  139,  515, 1122,  345,  139,  140,
      141,  349,  350,  429,  349,  345,  372,  372,  372,  372,

      434,  691,  308,  688,  304,  309,  304,  310,  583,  135,
      142,  135,  373,  349,  350,  305,  349,  374,  463,  463,
      463,  463,  971,  522,  542,  464, 1121,  523, 1117,  544,
      583,  584,  585,  524,  312,  525,  135,  135,  135,  135,
      119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
      119,  119,  119,  119,  119,  119,  119,  146,  119,  119,
      119,  119,  147,  119,  119,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  119,  126,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,

      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      119,  119,  119,  149,  148,  150,  150,  151,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  150,  153,
      150,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  150,  150,  150,  150,  152,
      162,  162,  163,  162,  162,  162,  164,  675,  162,  162,

     1116,  162,  162,  162,  798,  162,  619,  162,  166,  603,
      619,  676,  166,  162,  162,  372,  372,  372,  372, 1114,
      971,  372,  372,  372,  372,  438,  439,  798,  375,  709,
      439,  373,  619,  162,  167,  162,  374,  373,  378,  378,
      378,  378,  374, 1113,  604,  375,  449,  450,  636,  449,
      709,  636,  439,  611,  373,  612,  612,  612,  416,  374,
      162,  162,  162,  162,  162,  162,  163,  162,  162,  162,
      164,  605,  162,  162,  607,  162,  162,  162,  905,  162,
      601,  162,  166,  601, 1112, 1119,  166,  162,  162,  297,
      298,  451,  297,  377,  906,  372,  372,  372,  372,  408,

      408,  408,  408,  408,  408,  408,  408,  162,  167,  162,
      377,  373,  588,  526,  971,  409,  374,  380,  522,  409,
      410,  971,  523,  607,  410, 1111,  349,  350,  524,  349,
      525, 1110,  299,  588,  162,  162,  162,  162,  168,  168,
      169,  168,  168,  168,  168,  168,  170,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  168,  172,  168,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  168,  168,
      168,  168,  171,  173,  174,  175,  174,  174,  173,  173,
      173,  176,  173,  173,  173,  173,  173,  173,  173,  173,
      177,  173,  173,  173,  173,  178,  173,  173,  173,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  173,  180,  173,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  173,  173,  173,  181,  179,  182,  182,
      183,  182,  182,  182,  182,  182,  184,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  182,  186,  182,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  182,  182,
      182,  182,  185,   86,   86,  187,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,   86,  189,   86,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,   86,   86,   86,   86,  188,  193,  193,
      194,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  193,  196,  193,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,

      195,  195,  195,  195,  195,  195,  195,  195,  193,  193,
      193,  193,  195,   86,   86,  202,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   86,   86,   86,   86,  203,  220,  221,
      222,  220,  221,  220,  220,  220,  220,  220,  220,  223,

      220,  220,  220,  220,  360,  361,  220,  360, 1109,  400,
      220,  220,  220,  220, 1137,  439,  586,  542,  400,  439,
     1137,  359,  544,  360,  361,  359,  360,  400,  587,  402,
      403,  220,  225,  220,  403,  705,  400,  586,  547,  460,
      461,  439,  460,  549, 1067,  469,  470,  359,  469,  362,
      587,  573,  474,  475,  573,  474,  403,  705,  220,  220,
      220,  220,  220,  220,  221,  222,  220,  221,  220,  220,
      220,  220,  220,  220,  223,  220,  220,  220,  220,  392,
      393,  220,  392, 1105,  462,  220,  220,  220,  220, 1104,
      471,  369,  370, 1137,  369, 1137,  391,  476,  494,  617,

      391,  494,  617,  495, 1137,  403,  220,  225,  220,  403,
      304, 1137,  304,  304,  547,  304,  304,  304, 1103,  549,
     1102,  305,  391,  305,  394,  384,  384,  384,  384, 1101,
     1100,  403,  385,  220,  220,  220,  220,  220,  243,  243,
      244,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  243,  246,  243,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  243,  243,
      243,  243,  245,  256,  256,  257,  256,  256,  256,  256,
      256,  258,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  256,  256,  256,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  256,  260,  256,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  256,  256,  256,  256,  259,  261,  261,
      262,  261,  261,  261,  261,  261,  263,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  261,  265,  261,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  261,  261,
      261,  261,  264,  270,  270,  271,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  270,  273,  270,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  270,  270,  270,  270,  272,  283,  283,
      284,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  404, 1099, 1098,
      283,  283,  283,  283,  415,  408,  408,  415, 1137,  403,
      713, 1097,  708,  403,  416,  400,  452,  452,  452,  452,
      409,  283,  286,  283,  714,  410,  408,  408,  408,  408,
     1096,  713,  453,  411,  708,  403, 1095,  454,  478,  479,

     1094,  478,  409,  489,  490,  714,  489,  410,  283,  283,
      283,  283,  283,  283,  284,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  283,  283,  283,  283,
      283, 1092, 1088, 1087,  283,  283,  283,  283,  452,  452,
      452,  452,  712,  480,  405,  406,  488,  405,  491, 1137,
      452,  452,  452,  452,  453,  283,  286,  283,  413,  454,
     1137,  403, 1086,  607,  712,  403,  453, 1137, 1085,  358,
      359,  454,  504,  505,  359,  504,  624,  624,  624,  624,
      926, 1136,  283,  283,  283,  283,  313,  403, 1083,  407,
      414,  414,  414,  414,  927,  507,  359,  411,  507,  314,

      452,  452,  452,  452,  719,  508,  409,  455,  628,  315,
      316,  410,  628, 1082,  317,  318,  453,  506, 1081,  319,
      320,  454,  321,  322, 1080,  718,  510,  511,  718,  510,
      315,  316, 1079, 1078,  628,  317,  318,  440,  441,  719,
      440,  319,  320,  323,  324,  321,  322,  325,  325,  325,
      325,  802,  601, 1137,  439,  601,  326,  633,  439, 1077,
      795,  633,  413,  325,  325,  327,  719,  444,  444,  444,
      444,  512,  457,  802,  445,  601,  527,  528,  601,  527,
      439,  795,  442,  633,  329,  446,  446,  446,  447, 1076,
     1075,  330,  331,  531,  532,  607,  531, 1137,  359, 1074,

      535,  536,  359,  535,  458,  458,  458,  458,  608, 1069,
      332,  455,  333,  334,  325,  325,  325,  325,  799,  617,
      453,  529,  617,  326,  359,  454,  487,  487,  487,  487,
      325,  325,  329,  538,  539, 1068,  538,  590,  533,  799,
      590,  588,  487,  487,  488,  537,  297,  298, 1065,  297,
     1064,  327,  601,  337,  298,  601,  390,  391,  338,  339,
      591,  391,  588,  487,  601,  590,  601,  601,  590,  601,
      347,  603,  617,  347, 1063,  617,  457,  332,  540,  333,
      334,  340,  642,  391,  340,  610,  642, 1062,  591,  299,
      592,  345,  487,  341,  341,  607,  342,  343, 1061,  869,

      344,  344,  345, 1060,  593,  295,  604,  607,  642,  711,
      609,  592,  711,  353,  347,  721,  353,  347,  381,  382,
      869,  381,  613,  614,  296,  613,  593,  784,  354,  354,
      784,  484,  591,  605,  345,  345, 1059,  615,  392,  393,
      345,  392,  485,  616, 1137,  391,  305,  353, 1058,  391,
      353,  345,  395,  395, 1057,  395,  395,  395,  396, 1056,
      395,  395,  354,  395,  395,  395, 1055,  395,  345,  395,
      398,  391, 1054,  486,  398,  395,  399,  351,  588,  352,
      352,  352, 1053,  345,  345,  305,  353,  405,  406,  353,
      405, 1052,  616,  358,  359,  395,  398,  395,  359,  588,

     1051,  610,  384,  384,  384,  384, 1050,  345,  943,  385,
     1009, 1137, 1137, 1137, 1137, 1049,  794,  345, 1137,  794,
      359, 1048,  395,  395,  395,  395,  325,  325,  325,  325,
      943, 1047, 1009,  620,  372,  372,  372,  372,  422,  423,
     1046,  422,  325,  325,  568,  378,  378,  378,  378,  514,
      373,  718,  375, 1044,  718,  374,  345, 1137, 1137, 1137,
     1137,  373, 1137,  325, 1137, 1137,  374, 1043, 1042, 1041,
      330,  331, 1137, 1137,  427,  428,  784,  427, 1137,  784,
     1040,  372,  372,  372,  372,  372,  372,  372,  372,  332,
     1039,  333,  334,  325,  325,  325,  325,  373, 1038,  438,

      439,  373,  374,  380,  439,  909,  374,  380,  910,  325,
      325,  325,  408,  408,  408,  408, 1037,  377,  378,  378,
      378,  378,  390,  391, 1036,  375,  439,  391,  409, 1137,
      568, 1035,  711,  410,  373,  711, 1033,  330,  331,  374,
      418,  418,  418,  418,  971,  432,  433,  419,  432,  391,
      418,  418,  418,  418, 1032,  591,  332,  419,  333,  334,
      575,  989,  629,  575,  989,  575,  575,  575,  575,  575,
      575,  575,  576,  575,  577,  575,  577,  578,  575, 1031,
      400, 1030,  575,  575,  575,  580, 1137, 1137, 1137, 1137,
      377,  402,  403, 1137,  440,  441,  403,  440,  400, 1137,

     1029, 1137,  439,  575,  575,  575,  439, 1028, 1027,  400,
     1137,  403, 1026,  449,  450,  403,  449, 1137,  403,  636,
      402,  403,  636,  460,  461,  403,  460,  400,  439,  416,
      575,  575,  575,  575,  575,  601,  636,  403,  601,  636,
     1025, 1137, 1137, 1137, 1137, 1024,  416,  403,  438,  439,
     1022,  469,  470,  439,  469, 1021, 1020, 1137, 1137, 1137,
      634,  414,  414,  414,  414, 1017, 1016, 1011,  411, 1137,
     1137, 1137, 1137, 1010,  871,  439, 1137,  409, 1137, 1008,
      474,  475,  410,  474, 1007, 1137,  478,  479,  643,  478,
     1137, 1006, 1005,  415,  408,  408,  415, 1004,  444,  444,

      444,  444, 1003,  416, 1137,  445, 1137, 1137,  340,  409,
     1002,  340,  489,  490,  410,  489,  446,  446,  446,  447,
      341,  341,  601,  342,  343,  601, 1001,  344,  344,  345,
     1000, 1084,  295,  413, 1084,  999,  414,  414,  414,  414,
      998, 1137,  997,  411,  415,  408,  408,  415,  996,  995,
      601,  296,  409,  601,  416,  504,  505,  410,  504,  994,
      409,  510,  511,  800,  510,  410,  800,  993,  444,  444,
      444,  444, 1012,  992,  463,  463,  463,  463,  345,  395,
      395,  464,  395,  395,  395,  630,  801,  395,  395,  447,
      395,  395,  395,  607,  395, 1115,  631,  398, 1115,  725,

      991,  398,  395,  399,  415,  408,  408,  415,  413,  444,
      444,  444,  444,  990,  416,  988,  445,  987,  527,  528,
      409,  527,  395,  398,  395,  410,  984,  446,  446,  446,
      447,  463,  463,  463,  463,  983,  982,  981,  464,  452,
      452,  452,  452,  513,  514,  771,  513,  980,  771,  395,
      395,  395,  395,  395,  395,  453,  395,  395,  395,  630,
      454,  395,  395,  979,  395,  395,  395,  978,  395,  601,
      395,  398,  601,  977,  976,  398,  395,  395,  975,  971,
      974,  444,  444,  444,  444,  973,  515,  972,  445,  452,
      452,  452,  452,  969,  968,  967,  395,  398,  395,  646,

      646,  646,  447,  772,  966,  453,  458,  458,  458,  458,
      454,  965,  607,  455, 1137, 1137, 1137, 1137,  964,  878,
      963, 1137,  453,  395,  395,  395,  395,  454,  962,  961,
     1137,  458,  458,  458,  458, 1137,  960,  958,  455,  452,
      452,  452,  452, 1137, 1137, 1137, 1137,  453,  531,  532,
     1137,  531,  454,  535,  536,  453,  535,  957,  538,  539,
      454,  538,  956,  718,  953,  611,  718,  612,  612,  612,
      719,  601,  613,  614,  601,  613,  613,  614,  457,  613,
      601, 1071,  298,  601, 1071,  870, 1137,  726,  870,  952,
      947,  727,  601,  616,  946,  601,  801,  616, 1071,  298,

      942, 1071,  941,  457,  575,  719,  701,  575,  871,  575,
      575,  575,  575,  575,  575,  575,  576,  575,  577,  575,
      577,  702,  575,  607, 1072,  805,  575,  575,  575,  580,
      613,  614,  719,  613,  724,  613,  614,  940,  613,  358,
      619,  299,  616,  939,  619,  728,  616,  575,  703,  575,
      727,  616, 1137,  619,  305,  948,  616,  619,  358,  359,
      390,  628,  938,  359,  937,  628,  619,  731,  731,  731,
      731,  936,  935,  934,  575,  575,  575,  575,  575,  619,
      733,  733,  733,  733,  933,  359,  400,  628, 1137,  628,
      732,  932,  931,  628,  390,  391,  729,  402,  633,  391,

      616,  930,  633,  732,  400,  616,  929,  601,  438,  642,
      601, 1137,  928,  642,  925,  628,  924,  731,  731,  731,
      731,  391, 1137,  633,  633, 1137,  642,  633,  601, 1137,
      642,  601,  735,  395,  395,  642,  395,  395,  395,  630,
      732,  395,  395,  923,  395,  395,  395,  400,  395,  633,
      395,  737,  642,  920,  919,  737,  395,  395,  402,  403,
      918,  438,  439,  403,  917,  400,  439,  601, 1070,  915,
      601,  607,  444,  444,  444,  444,  395,  737,  395,  744,
      747,  747,  747,  747,  914,  403,  807,  445,  439,  913,
      745,  745,  745,  447,  601, 1124,  738,  601, 1124,  743,

      912,  447,  911,  395,  395,  395,  395,  444,  444,  444,
      444,  908,  907, 1106,  445,  444,  444,  444,  444,  308,
      904,  304,  445,  304,  793,  646,  646,  646,  447,  903,
      902,  901,  305,  646,  646,  646,  447,  607,  613,  614,
      900,  613,  613,  614,  899,  613,  613,  614,  808,  613,
      358,  359,  898,  726,  897,  359,  896,  809,  895,  616,
      894,  728,  893,  616,  390,  391,  892,  616,  891,  391,
      305,  733,  733,  733,  733,  887,  886,  359,  444,  444,
      444,  444,  438,  439,  885,  744,  882,  439,  881,  400,
      873,  391,  810,  873,  732,  877,  745,  745,  745,  447,

      402,  403,  875,  874,  868,  403,  813,  400,  616,  439,
      867,  601,  616,  801,  601,  866,  616,  395,  395,  701,
      395,  395,  395,  630,  818,  395,  395,  403,  395,  395,
      395,  864,  395, 1126,  631,  737, 1126,  863,  862,  737,
      395,  399,  814,  563,  861,  444,  444,  444,  444,  860,
      358,  359,  744,  859,  308,  359,  304,  858,  304,  793,
      395,  737,  395,  745,  745,  745,  447,  305,  601,  876,
      857,  601,  747,  747,  747,  747,  856,  359,  945,  445,
      601,  945,  873,  601,  880,  873,  855,  395,  395,  395,
      395,  395,  395,  447,  395,  395,  395,  630,  854,  395,

      395,  871,  395,  395,  395,  801,  395, 1129,  395,  737,
     1129,  830,  831,  737,  395,  395,  832,  390,  391,  833,
      834,  853,  391,  607,  835,  852, 1091,  836,  837,  945,
      838,  851,  945,  850,  395,  737,  395,  400,  879,  613,
      614,  849,  613,  848,  391,  438,  439,  847,  402,  403,
      439,  883,  871,  403,  726,  400,  601,  846,  845,  601,
      616,  395,  395,  395,  395,  844,  444,  444,  444,  444,
      843,  601,  439,  744,  601,  403,  842, 1066, 1126,  888,
     1066, 1126,  884,  841,  889,  889,  889,  447,  358,  359,
      390,  391,  840,  359,  400,  391,  438,  439,  839,  607,

     1067,  439,  829,  949, 1129,  402,  403, 1129,  601,  616,
      403,  601,  400, 1135,  607,  359, 1135,  391,  828,  951,
      827,  954,  601,  439,  826,  601,  825,  959,  444,  444,
      444,  444,  403,  824,  950,  744,  955,  444,  444,  444,
      444,  823,  601,  822,  744,  601,  889,  889,  889,  447,
     1090,  607,  467, 1090,  821,  889,  889,  889,  447,  358,
      359,  390,  391,  400,  359,  607,  391,  601,  820, 1013,
      601,  817, 1014, 1067,  402,  403,  816,  601,  815,  403,
      601,  400,  438,  439,  812,  607,  359,  439,  391,  358,
      359,  390,  391,  811,  359,  607,  391,  438,  439,  400,

      806,  403,  439, 1073, 1015, 1090, 1018,  804, 1090,  439,
      402,  403,  803,  591,  797,  403,  359,  400,  391, 1019,
      607,  796,  601, 1118,  439,  601,  601, 1023, 1067,  601,
     1126,  297,  298, 1126,  297, 1093,  693,  403,  720,  791,
      720,  720,  720,  790,  693,  789,  693,  693,  693,  723,
      788,  723,  723,  723,  693,  563,  786,  693,  693,  720,
      785,  720,  720,  720,  691,  607,  783,  782, 1108,  607,
      781,  780,  779,  607, 1072,  723,  778,  723,  723,  723,
      777,  776, 1120,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,

      197,  197,  197,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  253,  253,  253,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,

      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  300,  300,  775,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  303,  774,  773,
      770,  769,  768,  766,  765,  764,  763,  762,  761,  760,
      759,  758,  303,  757,  303,  303,  303,  755,  754,  753,
      752,  303,  304,  751,  304,  304,  467,  304,  749,  748,
      742,  304,  304,  741,  304,  304,  304,  311,  740,  311,
      311,  311,  311,  739,  311,  380,  734,  730,  311,  311,

      311,  311,  311,  311,  328,  328,  328,  717,  716,  715,
      707,  706,  328,  704, 1137,  305,  305,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  305,  328,  328,  335,
      701,  335,  335,  571,  335,  699,  698,  697,  335,  335,
      696,  335,  335,  335,  336,  336,  336,  563,  694,  692,
      689,  686,  336,  685,  547,  684,  683,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  542,  336,  336,  355,
      355,  682,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,

      355,  357,  681,  680,  679,  678,  677,  357,  674,  357,
      357,  357,  357,  357,  673,  672,  357,  357,  357,  357,
      357,  357,  671,  670,  667,  516,  357,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  365,
      666,  365,  365,  365,  665,  664,  663,  662,  365,  367,
      497,  367,  367,  497,  661,  660,  367,  658,  367,  367,
      367,  491,  486,  657,  656,  367,  376,  376,  376,  376,
      655,  654,  376,  473,  653,  467,  651,  467,  649,  453,

      376,  648,  645,  376,  436,  640,  431,  376,  639,  376,
      376,  376,  426,  638,  409,  376,  376,  379,  379,  379,
      379,  630,  630,  630,  388,  380,  625,  373,  622,  366,
      621,  379,  364,  379,  379,  379,  356,  602,  379,  600,
      379,  379,  379,  597,  596,  595,  582,  379,  386,  386,
      386,  386,  305,  305,  386,  571,  301,  569,  566,  564,
      563,  560,  558,  557,  555,  553,  552,  550,  545,  386,
      516,  386,  386,  386,  502,  501,  500,  498,  386,  387,
      387,  497,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,

      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  389,  493,  486,  482,  473,  467,  389,  453,  389,
      389,  389,  389,  389,  436,  431,  389,  389,  389,  389,
      389,  389,  426,  409,  388,  388,  389,  397,  397,  373,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  401,
      401,  364,  356,  305,  302,  301,  401, 1137,  401,  401,
      401,  401,  401,  113,  401,  401,  401,  401,  401,  401,
      401,  113, 1137, 1137, 1137,  401,  412,  412,  412,  412,

     1137, 1137,  412, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
      412, 1137, 1137,  412, 1137, 1137, 1137,  412, 1137,  412,
      412,  412, 1137, 1137, 1137,  412,  412,  417,  417,  417,
      417, 1137, 1137, 1137, 1137,  417, 1137, 1137, 1137, 1137,
     1137,  417, 1137,  417,  417, 1137, 1137, 1137,  417, 1137,
      417,  417,  417, 1137, 1137, 1137, 1137,  417,  420,  420,
      420,  420, 1137, 1137,  420, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  420,
     1137,  420,  420,  420, 1137, 1137, 1137, 1137,  420,  421,
     1137, 1137,  421, 1137, 1137, 1137, 1137,  421, 1137,  421,

      421,  421, 1137, 1137, 1137, 1137,  421,  425,  425, 1137,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  430,
      430, 1137,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  435,  435, 1137,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  437, 1137, 1137, 1137, 1137, 1137,  437,
     1137,  437,  437,  437,  437,  437, 1137, 1137,  437,  437,
      437,  437,  437,  437, 1137, 1137, 1137, 1137,  437,  443,
     1137,  443,  443,  443, 1137, 1137, 1137, 1137,  443,  448,
      448,  448,  448, 1137, 1137,  448, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137,  448,  448, 1137, 1137, 1137,
      448, 1137,  448,  448,  448, 1137, 1137, 1137, 1137,  448,
      456,  456,  456,  456, 1137, 1137,  456, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  456, 1137, 1137,  456, 1137, 1137,
     1137,  456, 1137,  456,  456,  456, 1137, 1137, 1137,  456,

      456,  459,  459,  459,  459, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137,  459, 1137,  459,  459, 1137,
     1137, 1137,  459, 1137,  459,  459,  459, 1137, 1137, 1137,
     1137,  459,  465,  465,  465,  465, 1137, 1137,  465, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137,  465, 1137,  465,  465,  465, 1137, 1137,
     1137, 1137,  465,  466, 1137,  466,  466,  466, 1137, 1137,
     1137, 1137,  466,  468, 1137,  468, 1137, 1137, 1137, 1137,
      468, 1137,  468,  468,  468, 1137, 1137, 1137, 1137,  468,
      472,  472, 1137,  472, 1137, 1137, 1137, 1137,  472, 1137,

      472,  472,  472, 1137, 1137, 1137, 1137,  472,  477,  477,
     1137,  477,  477,  477,  477,  477,  477,  477,  477, 1137,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477, 1137,  477,  477,  477,  477,  477,  477,  477,  477,
      481, 1137, 1137,  481, 1137, 1137, 1137, 1137,  481, 1137,
      481,  481,  481, 1137, 1137, 1137, 1137,  481,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483, 1137,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      485,  485, 1137,  485,  485,  485,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485, 1137,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  487,  487, 1137,  487, 1137,  487,  487,  487,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
      487,  487,  487, 1137,  487,  487, 1137, 1137, 1137, 1137,
     1137,  487,  492, 1137, 1137,  492, 1137, 1137, 1137, 1137,
      492, 1137,  492,  492,  492, 1137, 1137, 1137, 1137,  492,
      496,  496, 1137,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,

      496,  496,  499,  499, 1137,  499, 1137,  499,  499,  499,
      499,  499,  499, 1137,  499,  499,  499,  499, 1137,  499,
      499,  499,  499, 1137,  499, 1137,  499,  499,  499,  499,
      499,  499,  499,  499,  509, 1137, 1137,  509, 1137, 1137,
     1137, 1137,  509, 1137, 1137, 1137, 1137,  509,  509, 1137,
      509, 1137, 1137, 1137, 1137,  509, 1137,  509,  509,  509,
      517,  517, 1137,  517, 1137,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
      517, 1137,  517, 1137,  517,  517,  517,  517,  517,  517,
      517,  517,  521,  521, 1137,  521, 1137,  521,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521, 1137,  521, 1137,  521,  521,  521,  521,
      521,  521,  521,  521,  530, 1137, 1137,  530, 1137, 1137,
     1137, 1137,  530, 1137,  530,  530,  530, 1137, 1137, 1137,
     1137,  530,  534,  534, 1137,  534,  534,  534,  534,  534,
      534, 1137, 1137,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534, 1137,  534, 1137,  534,  534,  534,  534,
      534,  534,  534,  534,  541, 1137,  541,  541,  541, 1137,
     1137, 1137, 1137,  541,  543, 1137,  543,  543, 1137, 1137,
     1137,  543, 1137,  543,  543,  543, 1137, 1137, 1137, 1137,

      543,  546, 1137,  546,  546,  546, 1137, 1137, 1137, 1137,
      546,  548, 1137,  548,  548, 1137, 1137, 1137,  548, 1137,
      548,  548,  548, 1137, 1137, 1137, 1137,  548,  551,  551,
     1137,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551, 1137,
      551, 1137,  551,  551,  551,  551,  551,  551,  551,  551,
      554, 1137, 1137,  554, 1137, 1137, 1137, 1137,  554, 1137,
      554,  554,  554, 1137, 1137, 1137, 1137,  554,  556,  556,
     1137,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  556, 1137,  556,  556,  556,  556,  556,  556,  556,

      556, 1137,  556,  556,  556,  556,  556,  556,  556,  556,
      559,  559, 1137,  559,  559,  559,  559,  559,  559,  559,
      559, 1137,  559,  559,  559,  559,  559,  559,  559,  559,
      559, 1137,  559, 1137,  559,  559,  559,  559,  559,  559,
      559,  559,  562, 1137,  562,  562,  562,  562,  562, 1137,
     1137, 1137,  562, 1137,  562,  562,  562, 1137, 1137, 1137,
     1137,  562,  565,  565, 1137,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,
      565,  565,  565,  565,  565, 1137,  565,  565,  565,  565,
      565,  565,  565,  565,  567,  567,  567,  567,  567,  567,

      567,  567,  567, 1137, 1137,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  328,  328,  328, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  328,
      328,  328,  328,  328,  328,  328,  328,  328, 1137,  328,
      328,  300,  300, 1137,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  303, 1137,  303,  303,  303, 1137, 1137,
     1137, 1137,  303,  570,  570, 1137, 1137, 1137,  570, 1137,

      570,  570,  570, 1137, 1137, 1137, 1137,  570,  304, 1137,
      304,  304, 1137,  304, 1137, 1137, 1137,  304,  304, 1137,
      304,  304,  304,  572, 1137, 1137,  572, 1137, 1137, 1137,
     1137,  572, 1137,  572,  572,  572,  579, 1137, 1137,  579,
     1137,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  598, 1137,
      598,  598,  598, 1137, 1137, 1137,  598,  606, 1137, 1137,
     1137, 1137, 1137, 1137, 1137,  606, 1137,  606,  606,  606,
      335, 1137,  335,  335, 1137,  335, 1137, 1137, 1137,  335,

      335, 1137,  335,  335,  335,  336, 1137, 1137,  336, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137,  336,  336,  336,  336,
      336,  355,  355, 1137,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  357, 1137, 1137, 1137, 1137, 1137,  357,
     1137,  357,  357,  357,  357,  357, 1137, 1137,  357,  357,
      357,  357,  357,  357, 1137, 1137, 1137, 1137,  357,  618,
     1137, 1137, 1137, 1137, 1137,  618, 1137,  618, 1137,  618,

      618,  618, 1137, 1137,  618,  618,  618,  618,  618,  618,
     1137, 1137, 1137, 1137,  618,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  363,  363,  363,  367, 1137,  367,
      367, 1137, 1137, 1137,  367, 1137,  367,  367,  367, 1137,
     1137, 1137, 1137,  367,  365, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  365,
     1137,  365,  365,  365, 1137, 1137, 1137, 1137,  365,  376,
      376,  376,  376, 1137, 1137,  376, 1137, 1137, 1137, 1137,

     1137, 1137, 1137,  376, 1137, 1137,  376, 1137, 1137, 1137,
      376, 1137,  376,  376,  376, 1137, 1137, 1137,  376,  376,
      379,  379,  379,  379, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  379, 1137,  379,  379,  379, 1137,
     1137,  379, 1137,  379,  379,  379, 1137, 1137, 1137, 1137,
      379,  386,  386,  386,  386, 1137, 1137,  386, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137,  386, 1137,  386,  386,  386, 1137, 1137, 1137,
     1137,  386,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623, 1137,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  626, 1137,  626, 1137, 1137,  626,
     1137,  626,  626,  626, 1137, 1137, 1137, 1137,  626,  387,
      387, 1137,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  387,  387,
      387,  389, 1137, 1137, 1137, 1137, 1137,  389, 1137,  389,
      389,  389,  389,  389, 1137, 1137,  389,  389,  389,  389,
      389,  389, 1137, 1137, 1137, 1137,  389,  627, 1137, 1137,
     1137, 1137, 1137,  627, 1137,  627, 1137,  627,  627,  627,

     1137, 1137,  627,  627,  627,  627,  627,  627, 1137, 1137,
     1137, 1137,  627,  395,  395, 1137,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  397,  397, 1137,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  401,  401, 1137,
     1137, 1137, 1137, 1137,  401, 1137,  401,  401,  401,  401,
      401, 1137,  401,  401,  401,  401,  401,  401,  401, 1137,

     1137, 1137, 1137,  401,  632, 1137, 1137, 1137, 1137, 1137,
      632, 1137,  632, 1137,  632,  632,  632, 1137, 1137,  632,
      632,  632,  632,  632,  632, 1137, 1137, 1137, 1137,  632,
      412,  412,  412,  412, 1137, 1137,  412, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  412, 1137, 1137,  412, 1137, 1137,
     1137,  412, 1137,  412,  412,  412, 1137, 1137, 1137,  412,
      412,  417,  417,  417,  417, 1137, 1137, 1137, 1137,  417,
     1137, 1137, 1137, 1137, 1137,  417, 1137,  417,  417, 1137,
     1137, 1137,  417, 1137,  417,  417,  417, 1137, 1137, 1137,
     1137,  417,  420,  420,  420,  420, 1137, 1137,  420, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137,  420, 1137,  420,  420,  420, 1137, 1137,
     1137, 1137,  420,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635, 1137,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  637, 1137, 1137,  637, 1137,
     1137, 1137, 1137,  637, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,  637, 1137, 1137, 1137, 1137,  637, 1137,  637,  637,
      637, 1137, 1137, 1137, 1137,  637,  421, 1137, 1137,  421,
     1137, 1137, 1137, 1137,  421, 1137,  421,  421,  421, 1137,

     1137, 1137, 1137,  421,  425,  425, 1137,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  430,  430, 1137,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  435,  435,
     1137,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      437, 1137, 1137, 1137, 1137, 1137,  437, 1137,  437,  437,
      437,  437,  437, 1137, 1137,  437,  437,  437,  437,  437,
      437, 1137, 1137, 1137, 1137,  437,  641, 1137, 1137, 1137,
     1137, 1137,  641, 1137,  641, 1137,  641,  641,  641, 1137,
     1137,  641,  641,  641,  641,  641,  641, 1137, 1137, 1137,
     1137,  641,  448,  448,  448,  448, 1137, 1137,  448, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  448,  448,
     1137, 1137, 1137,  448, 1137,  448,  448,  448, 1137, 1137,
     1137, 1137,  448,  644, 1137,  644,  644,  644, 1137, 1137,
     1137, 1137,  644,  647,  647,  647,  647, 1137, 1137,  647,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  647,
      647, 1137, 1137, 1137,  647, 1137,  647,  647,  647, 1137,
     1137, 1137, 1137,  647,  456,  456,  456,  456, 1137, 1137,
      456, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  456, 1137,
     1137,  456, 1137, 1137, 1137,  456, 1137,  456,  456,  456,
     1137, 1137, 1137,  456,  456,  459,  459,  459,  459, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,  459,
     1137,  459,  459, 1137, 1137, 1137,  459, 1137,  459,  459,
      459, 1137, 1137, 1137, 1137,  459,  465,  465,  465,  465,
     1137, 1137,  465, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137,  465, 1137,  465,
      465,  465, 1137, 1137, 1137, 1137,  465,  650, 1137, 1137,
     1137, 1137,  650, 1137,  650,  650,  650, 1137, 1137, 1137,
     1137,  650,  468, 1137,  468, 1137, 1137, 1137, 1137,  468,
     1137,  468,  468,  468, 1137, 1137, 1137, 1137,  468,  652,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  652, 1137,  652,  652,  652, 1137,
     1137, 1137, 1137,  652,  472,  472, 1137,  472, 1137, 1137,
     1137, 1137,  472, 1137,  472,  472,  472, 1137, 1137, 1137,
     1137,  472,  477,  477, 1137,  477,  477,  477,  477,  477,

      477,  477,  477, 1137,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477, 1137,  477,  477,  477,  477,
      477,  477,  477,  477,  481, 1137, 1137,  481, 1137, 1137,
     1137, 1137,  481, 1137,  481,  481,  481, 1137, 1137, 1137,
     1137,  481,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  483, 1137,  483,  483,  483,  483,  483,  483,
      483,  483,  483,  483,  485,  485, 1137,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  485,  485,  485, 1137,  485,  485,  485,  485,

      485,  485,  485,  485,  485,  485,  659, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,  659, 1137,  659,  659,  659, 1137, 1137, 1137, 1137,
      659,  492, 1137, 1137,  492, 1137, 1137, 1137, 1137,  492,
     1137,  492,  492,  492, 1137, 1137, 1137, 1137,  492,  496,
      496, 1137,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  496,  496,  496,  496,  496,  496,  496,  496,  496,
      496,  499,  499, 1137,  499, 1137,  499,  499,  499,  499,
      499,  499, 1137,  499,  499,  499,  499, 1137,  499,  499,

      499,  499, 1137,  499, 1137,  499,  499,  499,  499,  499,
      499,  499,  499,  509, 1137, 1137,  509, 1137, 1137, 1137,
     1137,  509, 1137, 1137, 1137, 1137,  509,  509, 1137,  509,
     1137, 1137, 1137, 1137,  509, 1137,  509,  509,  509,  517,
      517, 1137,  517, 1137,  517,  517,  517,  517,  517,  517,
      517,  517,  517,  517,  517,  517,  517,  517,  517,  517,
     1137,  517, 1137,  517,  517,  517,  517,  517,  517,  517,
      517,  521,  521, 1137,  521, 1137,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521, 1137,  521, 1137,  521,  521,  521,  521,  521,

      521,  521,  521,  530, 1137, 1137,  530, 1137, 1137, 1137,
     1137,  530, 1137,  530,  530,  530, 1137, 1137, 1137, 1137,
      530,  534,  534, 1137,  534,  534,  534,  534,  534,  534,
     1137, 1137,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534, 1137,  534, 1137,  534,  534,  534,  534,  534,
      534,  534,  534,  543, 1137,  543,  543, 1137, 1137, 1137,
      543, 1137,  543,  543,  543, 1137, 1137, 1137, 1137,  543,
      541, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137,  541, 1137,  541,  541,  541,
     1137, 1137, 1137, 1137,  541,  548, 1137,  548,  548, 1137,

     1137, 1137,  548, 1137,  548,  548,  548, 1137, 1137, 1137,
     1137,  548,  546, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137,  546, 1137,  546,
      546,  546, 1137, 1137, 1137, 1137,  546,  551,  551, 1137,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551, 1137,  551,
     1137,  551,  551,  551,  551,  551,  551,  551,  551,  554,
     1137, 1137,  554, 1137, 1137, 1137, 1137,  554, 1137,  554,
      554,  554, 1137, 1137, 1137, 1137,  554,  556,  556, 1137,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,

      556, 1137,  556,  556,  556,  556,  556,  556,  556,  556,
     1137,  556,  556,  556,  556,  556,  556,  556,  556,  559,
      559, 1137,  559,  559,  559,  559,  559,  559,  559,  559,
     1137,  559,  559,  559,  559,  559,  559,  559,  559,  559,
     1137,  559, 1137,  559,  559,  559,  559,  559,  559,  559,
      559,  562, 1137,  562,  562,  562,  562,  562, 1137, 1137,
     1137,  562, 1137,  562,  562,  562, 1137, 1137, 1137, 1137,
      562,  695, 1137, 1137, 1137, 1137,  695, 1137,  695,  695,
      695, 1137, 1137, 1137, 1137,  695,  565,  565, 1137,  565,
      565,  565,  565,  565,  565,  565,  565,  565,  565,  565,

      565,  565,  565,  565,  565,  565,  565,  565,  565, 1137,
      565,  565,  565,  565,  565,  565,  565,  565,  567,  567,
      567,  567,  567,  567,  567,  567,  567, 1137, 1137,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      567,  567,  567,  567,  567,  567,  567,  567,  567,  567,
      570,  570, 1137, 1137, 1137,  570, 1137,  570,  570,  570,
     1137, 1137, 1137, 1137,  570,  700,  700, 1137,  700,  700,
      700,  700, 1137,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  572,  572, 1137,

      572, 1137, 1137, 1137, 1137,  572, 1137,  572,  572,  572,
      304, 1137,  304,  304, 1137,  304, 1137, 1137, 1137,  304,
      304, 1137,  304,  304,  304,  579, 1137, 1137,  579, 1137,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  579,  579,  579,
      579,  579,  579,  579,  579,  579,  579,  710,  710, 1137,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  598,
     1137, 1137,  598, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
      598, 1137,  598,  598,  598,  328, 1137, 1137,  328, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137,  328, 1137,  328,  328,
      328,  722,  722, 1137,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
     1137,  722,  722,  606, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,  606, 1137,  606,  606,  606,  336, 1137, 1137,  336,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137,  336,  336,  336,
      336,  336,  618, 1137, 1137, 1137, 1137, 1137,  618, 1137,
      618,  618,  618,  618,  618, 1137, 1137,  618,  618,  618,
      618,  618,  618, 1137, 1137, 1137, 1137,  618,  357, 1137,
     1137, 1137, 1137, 1137,  357, 1137,  357,  357,  357,  357,
      357, 1137, 1137,  357,  357,  357,  357,  357,  357, 1137,
     1137, 1137, 1137,  357,  365, 1137,  365,  365,  365, 1137,
     1137, 1137, 1137,  365,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  626, 1137,  626, 1137,
     1137,  626, 1137,  626,  626,  626, 1137, 1137, 1137, 1137,
      626,  627, 1137, 1137, 1137, 1137, 1137,  627, 1137,  627,
      627,  627,  627,  627, 1137, 1137,  627,  627,  627,  627,
      627,  627, 1137, 1137, 1137, 1137,  627,  389, 1137, 1137,
     1137, 1137, 1137,  389, 1137,  389,  389,  389,  389,  389,
     1137, 1137,  389,  389,  389,  389,  389,  389, 1137, 1137,
     1137, 1137,  389,  736,  736, 1137,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,

      736,  736,  736,  736,  736,  632,  632, 1137, 1137, 1137,
     1137, 1137,  632, 1137,  632,  632,  632,  632,  632, 1137,
      632,  632,  632,  632,  632,  632,  632, 1137, 1137, 1137,
     1137,  632,  401,  401, 1137, 1137, 1137, 1137, 1137,  401,
     1137,  401,  401,  401,  401,  401, 1137,  401,  401,  401,
      401,  401,  401,  401, 1137, 1137, 1137, 1137,  401,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  635,  635,  635,  635,
      635,  637, 1137, 1137,  637, 1137, 1137, 1137, 1137,  637,

     1137, 1137, 1137, 1137, 1137, 1137, 1137,  637, 1137, 1137,
     1137, 1137,  637, 1137,  637,  637,  637, 1137, 1137, 1137,
     1137,  637,  641, 1137, 1137, 1137, 1137, 1137,  641, 1137,
      641,  641,  641,  641,  641, 1137, 1137,  641,  641,  641,
      641,  641,  641, 1137, 1137, 1137, 1137,  641,  437, 1137,
     1137, 1137, 1137, 1137,  437, 1137,  437,  437,  437,  437,
      437, 1137, 1137,  437,  437,  437,  437,  437,  437, 1137,
     1137, 1137, 1137,  437,  746,  746,  746,  746, 1137, 1137,
      746, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
      746,  746, 1137, 1137, 1137,  746, 1137,  746,  746,  746,

     1137, 1137, 1137, 1137,  746,  644,  644,  644,  644, 1137,
     1137,  644, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137,  644, 1137, 1137, 1137,  644, 1137,  644,  644,
      644, 1137, 1137, 1137, 1137,  644,  647,  647,  647,  647,
     1137, 1137,  647, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137,  647,  647, 1137, 1137, 1137,  647, 1137,  647,
      647,  647, 1137, 1137, 1137, 1137,  647,  650, 1137, 1137,
     1137, 1137,  650, 1137,  650,  650,  650, 1137, 1137, 1137,
     1137,  650,  652, 1137,  652,  652,  652, 1137, 1137, 1137,
     1137,  652,  750, 1137,  750, 1137, 1137, 1137, 1137,  750,

     1137,  750,  750,  750, 1137, 1137, 1137, 1137,  750,  659,
     1137,  659,  659,  659, 1137, 1137, 1137, 1137,  659,  756,
     1137, 1137, 1137, 1137,  756, 1137,  756,  756,  756, 1137,
     1137, 1137, 1137,  756,  767,  767,  767,  767,  767,  767,
      767,  767,  767,  767,  767,  767,  767,  767,  767,  767,
      767, 1137,  767,  767,  767,  767, 1137,  767, 1137, 1137,
      767,  767,  767,  767,  767,  767,  541, 1137,  541,  541,
      541, 1137, 1137, 1137, 1137,  541,  546, 1137,  546,  546,
      546, 1137, 1137, 1137, 1137,  546,  787, 1137,  787,  787,
      787,  787,  787, 1137, 1137, 1137,  787, 1137,  787,  787,

      787, 1137, 1137, 1137, 1137,  787,  700,  700, 1137,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  700,  700,  792, 1137,
     1137,  792, 1137, 1137, 1137, 1137,  792, 1137,  792,  792,
      792,  311, 1137,  311, 1137,  311,  311, 1137,  311, 1137,
     1137, 1137,  311,  311, 1137,  311,  311,  311,  710,  710,
     1137,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  710,  710,  710,  710,  710,

      328, 1137, 1137,  328, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,  328, 1137,  328,  328,  328,  722,  722, 1137,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
      722,  722,  722,  722,  722,  722,  722,  722,  723,  723,
      723,  723,  723,  336, 1137, 1137,  336, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  336,  336,  336,  336,  336,  304,
      304, 1137,  304, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

      304, 1137,  304,  304, 1137,  304,  304, 1137, 1137,  304,
      304, 1137,  304,  304,  304, 1137,  304,  357, 1137, 1137,
     1137, 1137, 1137,  357, 1137,  357,  357,  357,  357,  357,
     1137, 1137,  357,  357,  357,  357,  357,  357, 1137, 1137,
     1137, 1137,  357,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  389, 1137, 1137, 1137, 1137,
     1137,  389, 1137,  389,  389,  389,  389,  389, 1137, 1137,
      389,  389,  389,  389,  389,  389, 1137, 1137, 1137, 1137,

      389,  736,  736, 1137,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      736,  736,  736,  401,  401, 1137, 1137, 1137, 1137, 1137,
      401, 1137,  401,  401,  401,  401,  401, 1137,  401,  401,
      401,  401,  401,  401,  401, 1137, 1137, 1137, 1137,  401,
      437, 1137, 1137, 1137, 1137, 1137,  437, 1137,  437,  437,
      437,  437,  437, 1137, 1137,  437,  437,  437,  437,  437,
      437, 1137, 1137, 1137, 1137,  437,  819, 1137,  819,  819,
      819, 1137, 1137, 1137, 1137,  819,  746,  746,  746,  746,

     1137, 1137,  746, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137,  746,  746, 1137, 1137, 1137,  746, 1137,  746,
      746,  746, 1137, 1137, 1137, 1137,  746,  644,  644,  644,
      644, 1137, 1137,  644, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137,  644, 1137, 1137, 1137,  644, 1137,
      644,  644,  644, 1137, 1137, 1137, 1137,  644,  750, 1137,
      750, 1137, 1137, 1137, 1137,  750, 1137,  750,  750,  750,
     1137, 1137, 1137, 1137,  750,  756, 1137, 1137, 1137, 1137,
      756, 1137,  756,  756,  756, 1137, 1137, 1137, 1137,  756,
      865,  865, 1137,  865, 1137, 1137, 1137, 1137,  865, 1137,

      865,  865,  865,  872,  872, 1137,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  890,  890,  890,  890, 1137,
     1137,  890, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137,  890,  890, 1137, 1137, 1137,  890, 1137,  890,  890,
      890, 1137, 1137, 1137, 1137,  890,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
      916,  916,  916, 1137,  916,  916,  916,  916, 1137,  916,
     1137,  916, 1137,  916,  916,  916,  916,  916,  944,  944,

     1137,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      985,  985,  985,  985,  985,  985,  985,  985,  985,  985,
      985,  985,  985,  985,  985,  985,  985, 1137,  985,  985,
      985,  985, 1137,  985, 1137, 1137, 1137,  985,  985,  985,
      985,  985,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986, 1137,
      986,  986,  986,  986, 1137,  986, 1137, 1137, 1137,  986,
      986,  986,  986,  986, 1034, 1034, 1034, 1034, 1034, 1034,

     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1137, 1034, 1034, 1034, 1034, 1137, 1034, 1137, 1137,
     1137, 1034, 1034, 1034, 1034, 1034, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1137, 1045, 1045, 1045, 1045, 1137, 1045,
     1137, 1137, 1137, 1045, 1045, 1045, 1045, 1045, 1089, 1089,
     1137, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
       85, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137
    } ;

static yyconst flex_int16_t yy_chk[9667] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,   21,   22,    4,   23,
       21,   22,   24,   23,   47, 1132,   24,    4,    4,   35,
        4,    4,   36,   39,    4,    4,    4,   40,   48,  100,

       35,   57,  100,   36,   39,  233,  316,  117,   40,  233,
       43,   43,  117,   43,   58,   43,   39, 1130,   21,   22,
       40,   23,   44,   44,   24,   44,   47,   44,  316,   51,
       51,   35,   51,   63,   36,   39,   64,   81,   82,   40,
       48,   52,   52,   57,   52,    4,    5,    5,    5,    5,
        5,    5,    5,   43,    5,    5,   58,    5,    5,    5,
       45,    5,   45,    5,    5,   44,  282,  847,    5,    5,
        5,   45,   51, 1128,  847,   63,   45,  216,   64,   81,
       82,  259,  216,   45,   52,   46,  259,   46,   93,    5,
        5,    5,   53,  282,   53,   83,   46,   93,   75,  902,

      306,   46,   45,  306,   83,   83,   93,   54,   46,   54,
       89,   89,   75,   89,  902,   53,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,   46,    6,    6,
       54,    6,    6,    6,   53,    6,   69,    6,    6,   55,
       75,   55,    6,    6,    6,   56,   61,   56,   84,   54,
     1125,  101,  318,   89,  101,   61,   61,   84,   84,   69,
     1122,  264,   55,    6,    6,    6,  264, 1092,   56,   61,
      127,  127,  127,  127,  318,  101,  221,  127,   69,  221,
     1092,   55,  149,  149,  149,  149,  221,   56,   61,  149,
        6,    6,    6,    6,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,
       13,   70,   13,   13,   62,   13,   13,   13,   71,   13,
       72,   13,   13,   62,   62,   76,   13,   13,   13,   77,
      206,   78, 1121,  206,   70,  206,  518,   62,  518,   76,
       77,   71,   78,   72, 1117,  109,  109,   13,   13,   13,
      109,  396,   77,   70,   78,  104,   62,  104,  104,  104,

       71,   88,   72,  104,   88,  110,  110,   76, 1114,  396,
      110,   77,  109,   78,   13,   13,   13,   13,   14,   14,
       14,   14,   14,   14,   14,   88,   14,   14,  307,   14,
       14,   14,  110,   14, 1131,   14,   14,  307, 1131,  197,
       14,   14,   14,   94,   88,   94,   94,   94,   94,  312,
      197,  319,  312,  365,  118,  118,   94,  118,  365,  131,
      131,   14,   14,   14,  131,   97,  341,   97,   97,  341,
       97,   97,   97,  319,  234,   94,   97,  126,  126,  234,
      126,  197,  317,  234,  153,  153,  131,  153,   14,   14,
       14,   14,   15,   15,   15,   15,   15,   15,   15,  118,

       15,   15,  317,   15,   15,   15, 1119,   15,  224,   15,
       15,  224, 1127,  321,   15,   15,   15,  102,  224, 1127,
      102, 1119,  126,  102,  317,  105,  132,  132,  105,  153,
      294,  132,  102,  294,  321,   15,   15,   15,  102,  322,
      105,  102,  227,  227,  346,  227,  105,  346,  157,  157,
     1113,  157,  367,  132,  294,  161,  161,  367,  161,  327,
     1112,  322,   15,   15,   15,   15,   16,   16,   16,   16,
       16,   16,   16,  294,   16,   16,  553,   16,   16,   16,
      327,   16,  557,   16,   16,  227, 1111,  102,   16,   16,
       16,  103,  103,  157,  103,  105,  120,  120,  120,  120,

      161,  557,  103,  553,  103,  103,  103,  103,  314,   16,
       16,   16,  120,  343,  343,  103,  343,  120,  181,  181,
      181,  181, 1110,  238,  541,  181, 1109,  238, 1105,  541,
      314,  314,  314,  238,  103,  238,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       25,   25,   25,   25,   25,   25,   25,  525,   25,   25,

     1104,   25,   25,   25,  708,   25,  358,   25,   25,  331,
      358,  525,   25,   25,   25,  121,  121,  121,  121, 1102,
     1101,  122,  122,  122,  122,  165,  165,  708,  122,  587,
      165,  121,  358,   25,   25,   25,  121,  122,  123,  123,
      123,  123,  122, 1100,  331,  123,  172,  172,  420,  172,
      587,  420,  165,  344,  123,  344,  344,  344,  420,  123,
       25,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,  331,   26,   26, 1107,   26,   26,   26,  834,   26,
      336,   26,   26,  336, 1099, 1107,   26,   26,   26,  297,
      297,  172,  297,  122,  834,  125,  125,  125,  125,  143,

      143,  143,  143,  144,  144,  144,  144,   26,   26,   26,
      123,  125,  589,  239, 1098,  143,  125,  125,  239,  144,
      143, 1097,  239,  336,  144, 1096,  349,  349,  239,  349,
      239, 1095,  297,  589,   26,   26,   26,   26,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,

       49,   49,   49,   49,  111,  111,   49,  111, 1094,  630,
       49,   49,   49,   49,  166,  166,  315,  543,  138,  166,
      111,  111,  543,  360,  360,  111,  360,  630,  315,  138,
      138,   49,   49,   49,  138,  583,  138,  315,  546,  180,
      180,  166,  180,  546, 1089,  186,  186,  111,  186,  111,
      315,  573,  189,  189,  573,  189,  138,  583,   49,   49,
       49,   49,   49,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,  134,
      134,   50,  134, 1086,  180,   50,   50,   50,   50, 1085,
      186,  369,  369,  139,  369,  134,  134,  189,  494,  351,

      134,  494,  351,  494,  139,  139,   50,   50,   50,  139,
      335,  139,  335,  335,  548,  335,  335,  335, 1083,  548,
     1082,  335,  134,  351,  134,  377,  377,  377,  377, 1081,
     1080,  139,  377,   50,   50,   50,   50,   50,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,  140, 1079, 1078,
       79,   79,   79,   79,  148,  148,  148,  148,  140,  140,
      593, 1077,  586,  140,  148,  140,  174,  174,  174,  174,
      148,   79,   79,   79,  594,  148,  145,  145,  145,  145,
     1076,  593,  174,  145,  586,  140, 1075,  174,  192,  192,

     1074,  192,  145,  201,  201,  594,  201,  145,   79,   79,
       79,   79,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80, 1072, 1065, 1064,   80,   80,   80,   80,  175,  175,
      175,  175,  592,  192,  142,  142,  201,  142,  201,  142,
      179,  179,  179,  179,  175,   80,   80,   80,  145,  175,
      142,  142, 1051, 1134,  592,  142,  179,  142, 1050,  357,
      357,  179,  219,  219,  357,  219,  380,  380,  380,  380,
      851, 1134,   80,   80,   80,   80,   95,  142, 1048,  142,
      146,  146,  146,  146,  851,  507,  357,  146,  507,   95,

      176,  176,  176,  176,  698,  507,  146,  176,  390,   95,
       95,  146,  390, 1047,   95,   95,  176,  219, 1041,   95,
       95,  176,   95,   95, 1040,  598,  225,  225,  598,  225,
       95,   95, 1039, 1038,  390,   95,   95,  167,  167,  698,
      167,   95,   95,   95,   95,   95,   95,   96,   96,   96,
       96,  714,  337,  167,  167,  337,   96,  402,  167, 1037,
      705,  402,  146,   96,   96,   96,  698,  171,  171,  171,
      171,  225,  176,  714,  171,  601,  242,  242,  601,  242,
      167,  705,  167,  402,   96,  171,  171,  171,  171, 1036,
     1035,   96,   96,  246,  246,  337,  246,  359,  359, 1033,

      252,  252,  359,  252,  177,  177,  177,  177,  337, 1011,
       96,  177,   96,   96,   98,   98,   98,   98,  709,  611,
      177,  242,  611,   98,  359,  177,  200,  200,  200,  200,
       98,   98,   98,  255,  255, 1010,  255,  588,  246,  709,
      588,  712,  200,  200,  200,  252,  298,  298, 1008,  298,
     1007,   98,  338,   98, 1006,  338,  389,  389,   98,   98,
      588,  389,  712,  200,  339,  320,  602,  339,  320,  602,
      342,  339,  617,  342, 1005,  617,  177,   98,  255,   98,
       98,   99,  438,  389,   99,  342,  438, 1004,  320,  298,
      320,  342,  200,   99,   99,  338,   99,   99, 1003,  798,

       99,   99,   99, 1002,  320,   99,  339,  339,  438,  590,
      338,  320,  590,  345,  347,  602,  345,  347,  381,  381,
      798,  381,  348,  348,   99,  348,  320,  691,  345,  347,
      691,  483,  590,  339,  345,  347, 1001,  348,  392,  392,
      342,  392,  483,  348,  391,  391,  348,  353, 1000,  391,
      353,   99,  137,  137,  999,  137,  137,  137,  137,  998,
      137,  137,  353,  137,  137,  137,  997,  137,  353,  137,
      137,  391,  996,  483,  137,  137,  137,  352,  802,  352,
      352,  352,  995,  345,  347,  352,  354,  405,  405,  354,
      405,  994,  348,  362,  362,  137,  137,  137,  362,  802,

      993,  354,  384,  384,  384,  384,  992,  354,  869,  384,
      943,  385,  385,  385,  385,  991,  703,  353,  385,  703,
      362,  990,  137,  137,  137,  137,  295,  295,  295,  295,
      869,  988,  943,  362,  372,  372,  372,  372,  422,  422,
      987,  422,  295,  295,  295,  373,  373,  373,  373,  983,
      372,  718,  373,  982,  718,  372,  354,  375,  375,  375,
      375,  373,  509,  295,  375,  509,  373,  981,  980,  979,
      295,  295,  509,  375,  427,  427,  784,  427,  375,  784,
      978,  376,  376,  376,  376,  379,  379,  379,  379,  295,
      977,  295,  295,  296,  296,  296,  296,  376,  975,  437,

      437,  379,  376,  376,  437,  837,  379,  379,  837,  296,
      296,  296,  408,  408,  408,  408,  974,  373,  378,  378,
      378,  378,  394,  394,  973,  378,  437,  394,  408,  375,
      296,  972,  711,  408,  378,  711,  970,  296,  296,  378,
      413,  413,  413,  413,  969,  432,  432,  413,  432,  394,
      418,  418,  418,  418,  968,  711,  296,  418,  296,  296,
      310,  923,  394,  310,  923,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  967,
      401,  966,  310,  310,  310,  310,  419,  419,  419,  419,
      378,  401,  401,  419,  440,  440,  401,  440,  401,  403,

      965,  439,  439,  310,  310,  310,  439,  964,  963,  407,
      403,  403,  962,  449,  449,  403,  449,  403,  401,  636,
      407,  407,  636,  460,  460,  407,  460,  407,  439,  636,
      310,  310,  310,  310,  310,  328,  637,  403,  328,  637,
      961,  328,  328,  328,  328,  960,  637,  407,  442,  442,
      958,  469,  469,  442,  469,  957,  956,  328,  328,  328,
      407,  409,  409,  409,  409,  953,  952,  947,  409,  411,
      411,  411,  411,  946,  944,  442,  411,  409,  328,  942,
      474,  474,  409,  474,  941,  411,  478,  478,  442,  478,
      411,  940,  939,  412,  412,  412,  412,  938,  443,  443,

      443,  443,  937,  412,  328,  443,  328,  328,  340,  412,
      936,  340,  489,  489,  412,  489,  443,  443,  443,  443,
      340,  340,  948,  340,  340,  948,  935,  340,  340,  340,
      934, 1049,  340,  409, 1049,  933,  414,  414,  414,  414,
      932,  411,  931,  414,  415,  415,  415,  415,  930,  929,
      609,  340,  414,  609,  415,  504,  504,  414,  504,  928,
      415,  510,  510,  713,  510,  415,  713,  927,  444,  444,
      444,  444,  948,  926,  457,  457,  457,  457,  340,  397,
      397,  457,  397,  397,  397,  397,  713,  397,  397,  444,
      397,  397,  397,  609,  397, 1103,  397,  397, 1103,  609,

      925,  397,  397,  397,  417,  417,  417,  417,  414,  446,
      446,  446,  446,  924,  417,  922,  446,  920,  527,  527,
      417,  527,  397,  397,  397,  417,  917,  446,  446,  446,
      446,  463,  463,  463,  463,  915,  914,  913,  463,  452,
      452,  452,  452,  513,  513,  673,  513,  912,  673,  397,
      397,  397,  397,  398,  398,  452,  398,  398,  398,  398,
      452,  398,  398,  911,  398,  398,  398,  910,  398,  807,
      398,  398,  807,  909,  908,  398,  398,  398,  907,  906,
      905,  448,  448,  448,  448,  904,  513,  903,  448,  456,
      456,  456,  456,  901,  900,  899,  398,  398,  398,  448,

      448,  448,  448,  673,  898,  456,  453,  453,  453,  453,
      456,  897,  807,  453,  455,  455,  455,  455,  896,  807,
      895,  455,  453,  398,  398,  398,  398,  453,  893,  892,
      455,  458,  458,  458,  458,  455,  891,  887,  458,  459,
      459,  459,  459,  464,  464,  464,  464,  458,  531,  531,
      464,  531,  458,  535,  535,  459,  535,  886,  538,  538,
      459,  538,  885,  599,  882,  612,  599,  612,  612,  612,
      599,  721,  610,  610,  721,  610,  613,  613,  453,  613,
      608, 1013, 1013,  608, 1013,  799,  455,  610,  799,  881,
      875,  613,  876,  610,  874,  876,  872,  613, 1071, 1071,

      868, 1071,  867,  458,  578,  599,  865,  578,  799,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  608, 1013,  721,  578,  578,  578,  578,
      615,  615,  599,  615,  608,  616,  616,  864,  616,  618,
      618, 1071,  610,  863,  618,  615,  613,  578,  578,  578,
      616,  615,  619,  619,  615,  876,  616,  619,  620,  620,
      627,  627,  862,  620,  861,  627,  618,  623,  623,  623,
      623,  860,  859,  858,  578,  578,  578,  578,  578,  619,
      624,  624,  624,  624,  857,  620,  632,  627,  628,  628,
      623,  856,  855,  628,  629,  629,  620,  632,  632,  629,

      615,  854,  632,  624,  632,  616,  853, 1012,  641,  641,
     1012,  633,  852,  641,  850,  628,  849,  731,  731,  731,
      731,  629,  633,  633,  632,  642,  642,  633,  724,  633,
      642,  724,  629,  631,  631,  641,  631,  631,  631,  631,
      731,  631,  631,  848,  631,  631,  631,  634,  631,  633,
      631,  631,  642,  846,  845,  631,  631,  631,  634,  634,
      844,  643,  643,  634,  843,  634,  643, 1091, 1012,  842,
     1091,  724,  644,  644,  644,  644,  631,  631,  631,  644,
      645,  645,  645,  645,  841,  634,  724,  645,  643,  840,
      644,  644,  644,  644,  725, 1116,  634,  725, 1116,  643,

      839,  645,  838,  631,  631,  631,  631,  646,  646,  646,
      646,  836,  835, 1091,  646,  647,  647,  647,  647,  702,
      833,  702,  647,  702,  702,  646,  646,  646,  646,  832,
      831,  830,  702,  647,  647,  647,  647,  725,  726,  726,
      829,  726,  727,  727,  828,  727,  728,  728,  725,  728,
      729,  729,  827,  726,  826,  729,  825,  727,  824,  726,
      823,  728,  822,  727,  735,  735,  821,  728,  820,  735,
      728,  733,  733,  733,  733,  817,  816,  729,  745,  745,
      745,  745,  743,  743,  815,  745,  812,  743,  811,  738,
      800,  735,  729,  800,  733,  806,  745,  745,  745,  745,

      738,  738,  804,  803,  797,  738,  735,  738,  726,  743,
      796,  805,  727,  800,  805,  795,  728,  736,  736,  792,
      736,  736,  736,  736,  743,  736,  736,  738,  736,  736,
      736,  790,  736, 1118,  736,  736, 1118,  789,  788,  736,
      736,  736,  738,  787,  786,  746,  746,  746,  746,  785,
      810,  810,  746,  783,  793,  810,  793,  782,  793,  793,
      736,  736,  736,  746,  746,  746,  746,  793, 1070,  805,
      781, 1070,  747,  747,  747,  747,  780,  810,  870,  747,
      808,  870,  873,  808,  810,  873,  779,  736,  736,  736,
      736,  737,  737,  747,  737,  737,  737,  737,  778,  737,

      737,  870,  737,  737,  737,  873,  737, 1123,  737,  737,
     1123,  760,  760,  737,  737,  737,  760,  813,  813,  760,
      760,  777,  813,  808,  760,  776, 1070,  760,  760,  945,
      760,  775,  945,  774,  737,  737,  737,  814,  808,  809,
      809,  773,  809,  772,  813,  818,  818,  770,  814,  814,
      818,  813,  945,  814,  809,  814,  878,  769,  768,  878,
      809,  737,  737,  737,  737,  766,  819,  819,  819,  819,
      765,  879,  818,  819,  879,  814,  764, 1009, 1126,  818,
     1009, 1126,  814,  763,  819,  819,  819,  819,  880,  880,
      883,  883,  762,  880,  884,  883,  888,  888,  761,  878,

     1009,  888,  759,  878, 1129,  884,  884, 1129,  949,  809,
      884,  949,  884, 1133,  879,  880, 1133,  883,  758,  880,
      757,  883,  950,  888,  755,  950,  754,  888,  889,  889,
      889,  889,  884,  753,  879,  889,  884,  890,  890,  890,
      890,  752, 1014,  751,  890, 1014,  889,  889,  889,  889,
     1066,  949,  750, 1066,  749,  890,  890,  890,  890,  951,
      951,  954,  954,  955,  951,  950,  954, 1106,  748,  949,
     1106,  742,  950, 1066,  955,  955,  741, 1073,  740,  955,
     1073,  955,  959,  959,  734, 1014,  951,  959,  954, 1015,
     1015, 1018, 1018,  730, 1015,  723, 1018, 1023, 1023, 1019,

      722,  955, 1023, 1014,  951, 1090,  954,  716, 1090,  959,
     1019, 1019,  715,  710,  707, 1019, 1015, 1019, 1018,  955,
     1073,  706, 1093, 1106, 1023, 1093, 1108,  959, 1090, 1108,
     1120, 1136, 1136, 1120, 1136, 1073, 1294, 1019, 1306,  700,
     1306, 1306, 1306,  699, 1294,  697, 1337, 1294, 1294, 1310,
      696, 1310, 1310, 1310, 1337,  695,  694, 1337, 1337, 1343,
      692, 1343, 1343, 1343,  690, 1093,  689,  685, 1093, 1108,
      683,  681,  680, 1120, 1136, 1370,  679, 1370, 1370, 1370,
      678,  677, 1108, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,

     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1138, 1138, 1138, 1138, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1139, 1139, 1139, 1139, 1139, 1139, 1139, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,

     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
     1142, 1142, 1142, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,

     1147, 1147, 1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1148, 1148, 1148, 1148, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149,
     1149, 1149, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1151,

     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,
     1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154, 1154, 1154,

     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
     1156, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,

     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,

     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,

     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163, 1163, 1163, 1164, 1164,  676, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165,  675,  674,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661, 1165,  660, 1165, 1165, 1165,  657,  656,  655,
      654, 1165, 1166,  653, 1166, 1166,  652, 1166,  649,  648,
      640, 1166, 1166,  639, 1166, 1166, 1166, 1167,  638, 1167,
     1167, 1167, 1167,  635, 1167,  626,  625,  622, 1167, 1167,

     1167, 1167, 1167, 1167, 1168, 1168, 1168,  597,  596,  595,
      585,  584, 1168,  582,  580,  579,  577, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168,  574, 1168, 1168, 1169,
      572, 1169, 1169,  570, 1169,  569,  568,  566, 1169, 1169,
      564, 1169, 1169, 1169, 1170, 1170, 1170,  562,  561,  558,
      555,  552, 1170,  550,  549,  547,  545, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170,  544, 1170, 1170, 1171,
     1171,  542, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,

     1171, 1172,  540,  537,  533,  529,  526, 1172,  524, 1172,
     1172, 1172, 1172, 1172,  523,  522, 1172, 1172, 1172, 1172,
     1172, 1172,  520,  519,  516,  515, 1172, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
      512, 1174, 1174, 1174,  506,  503,  502,  498, 1174, 1175,
      496, 1175, 1175,  495,  493,  491, 1175,  488, 1175, 1175,
     1175,  486,  485,  482,  480, 1175, 1176, 1176, 1176, 1176,
      476,  473, 1176,  472,  471,  468,  467,  466,  462,  454,

     1176,  451,  447, 1176,  435,  434,  430, 1176,  429, 1176,
     1176, 1176,  425,  424,  410, 1176, 1176, 1177, 1177, 1177,
     1177,  404,  399,  395,  387,  386,  383,  374,  371,  368,
      366, 1177,  363, 1177, 1177, 1177,  355,  330, 1177,  329,
     1177, 1177, 1177,  326,  324,  323,  313, 1177, 1178, 1178,
     1178, 1178,  311,  304, 1178,  303,  300,  299,  289,  286,
      285,  281,  277,  276,  273,  269,  268,  265,  260, 1178,
      229, 1178, 1178, 1178,  215,  214,  213,  209, 1178, 1179,
     1179,  208, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1180,  204,  199,  196,  188,  185, 1180,  178, 1180,
     1180, 1180, 1180, 1180,  164,  160, 1180, 1180, 1180, 1180,
     1180, 1180,  156,  147,  133,  130, 1180, 1181, 1181,  124,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182,
     1182,  112,  108,   92,   91,   90, 1182,   85, 1182, 1182,
     1182, 1182, 1182,    8, 1182, 1182, 1182, 1182, 1182, 1182,
     1182,    7,    0,    0,    0, 1182, 1183, 1183, 1183, 1183,

        0,    0, 1183,    0,    0,    0,    0,    0,    0,    0,
     1183,    0,    0, 1183,    0,    0,    0, 1183,    0, 1183,
     1183, 1183,    0,    0,    0, 1183, 1183, 1184, 1184, 1184,
     1184,    0,    0,    0,    0, 1184,    0,    0,    0,    0,
        0, 1184,    0, 1184, 1184,    0,    0,    0, 1184,    0,
     1184, 1184, 1184,    0,    0,    0,    0, 1184, 1185, 1185,
     1185, 1185,    0,    0, 1185,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1185,
        0, 1185, 1185, 1185,    0,    0,    0,    0, 1185, 1186,
        0,    0, 1186,    0,    0,    0,    0, 1186,    0, 1186,

     1186, 1186,    0,    0,    0,    0, 1186, 1187, 1187,    0,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1188,
     1188,    0, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189,    0, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,

     1189, 1189, 1189, 1190,    0,    0,    0,    0,    0, 1190,
        0, 1190, 1190, 1190, 1190, 1190,    0,    0, 1190, 1190,
     1190, 1190, 1190, 1190,    0,    0,    0,    0, 1190, 1191,
        0, 1191, 1191, 1191,    0,    0,    0,    0, 1191, 1192,
     1192, 1192, 1192,    0,    0, 1192,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1192, 1192,    0,    0,    0,
     1192,    0, 1192, 1192, 1192,    0,    0,    0,    0, 1192,
     1193, 1193, 1193, 1193,    0,    0, 1193,    0,    0,    0,
        0,    0,    0,    0, 1193,    0,    0, 1193,    0,    0,
        0, 1193,    0, 1193, 1193, 1193,    0,    0,    0, 1193,

     1193, 1194, 1194, 1194, 1194,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1194,    0, 1194, 1194,    0,
        0,    0, 1194,    0, 1194, 1194, 1194,    0,    0,    0,
        0, 1194, 1195, 1195, 1195, 1195,    0,    0, 1195,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1195,    0, 1195, 1195, 1195,    0,    0,
        0,    0, 1195, 1196,    0, 1196, 1196, 1196,    0,    0,
        0,    0, 1196, 1197,    0, 1197,    0,    0,    0,    0,
     1197,    0, 1197, 1197, 1197,    0,    0,    0,    0, 1197,
     1198, 1198,    0, 1198,    0,    0,    0,    0, 1198,    0,

     1198, 1198, 1198,    0,    0,    0,    0, 1198, 1199, 1199,
        0, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,    0,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199,    0, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1200,    0,    0, 1200,    0,    0,    0,    0, 1200,    0,
     1200, 1200, 1200,    0,    0,    0,    0, 1200, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,    0,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1202, 1202,    0, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202,    0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1203, 1203,    0, 1203,    0, 1203, 1203, 1203,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1203, 1203, 1203,    0, 1203, 1203,    0,    0,    0,    0,
        0, 1203, 1204,    0,    0, 1204,    0,    0,    0,    0,
     1204,    0, 1204, 1204, 1204,    0,    0,    0,    0, 1204,
     1205, 1205,    0, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,

     1205, 1205, 1206, 1206,    0, 1206,    0, 1206, 1206, 1206,
     1206, 1206, 1206,    0, 1206, 1206, 1206, 1206,    0, 1206,
     1206, 1206, 1206,    0, 1206,    0, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1207,    0,    0, 1207,    0,    0,
        0,    0, 1207,    0,    0,    0,    0, 1207, 1207,    0,
     1207,    0,    0,    0,    0, 1207,    0, 1207, 1207, 1207,
     1208, 1208,    0, 1208,    0, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208,    0, 1208,    0, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1209, 1209,    0, 1209,    0, 1209, 1209, 1209,

     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,
     1209, 1209, 1209,    0, 1209,    0, 1209, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1210,    0,    0, 1210,    0,    0,
        0,    0, 1210,    0, 1210, 1210, 1210,    0,    0,    0,
        0, 1210, 1211, 1211,    0, 1211, 1211, 1211, 1211, 1211,
     1211,    0,    0, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211,    0, 1211,    0, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1212,    0, 1212, 1212, 1212,    0,
        0,    0,    0, 1212, 1213,    0, 1213, 1213,    0,    0,
        0, 1213,    0, 1213, 1213, 1213,    0,    0,    0,    0,

     1213, 1214,    0, 1214, 1214, 1214,    0,    0,    0,    0,
     1214, 1215,    0, 1215, 1215,    0,    0,    0, 1215,    0,
     1215, 1215, 1215,    0,    0,    0,    0, 1215, 1216, 1216,
        0, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,    0,
     1216,    0, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1217,    0,    0, 1217,    0,    0,    0,    0, 1217,    0,
     1217, 1217, 1217,    0,    0,    0,    0, 1217, 1218, 1218,
        0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218,

     1218,    0, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1219, 1219,    0, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219,    0, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219,    0, 1219,    0, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1220,    0, 1220, 1220, 1220, 1220, 1220,    0,
        0,    0, 1220,    0, 1220, 1220, 1220,    0,    0,    0,
        0, 1220, 1221, 1221,    0, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221,    0, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1222,

     1222, 1222, 1222,    0,    0, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1223, 1223, 1223,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1223,
     1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223,    0, 1223,
     1223, 1224, 1224,    0, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1225,    0, 1225, 1225, 1225,    0,    0,
        0,    0, 1225, 1226, 1226,    0,    0,    0, 1226,    0,

     1226, 1226, 1226,    0,    0,    0,    0, 1226, 1227,    0,
     1227, 1227,    0, 1227,    0,    0,    0, 1227, 1227,    0,
     1227, 1227, 1227, 1228,    0,    0, 1228,    0,    0,    0,
        0, 1228,    0, 1228, 1228, 1228, 1229,    0,    0, 1229,
        0, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230,    0,
     1230, 1230, 1230,    0,    0,    0, 1230, 1231,    0,    0,
        0,    0,    0,    0,    0, 1231,    0, 1231, 1231, 1231,
     1232,    0, 1232, 1232,    0, 1232,    0,    0,    0, 1232,

     1232,    0, 1232, 1232, 1232, 1233,    0,    0, 1233,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1233, 1233, 1233, 1233,
     1233, 1234, 1234,    0, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1235,    0,    0,    0,    0,    0, 1235,
        0, 1235, 1235, 1235, 1235, 1235,    0,    0, 1235, 1235,
     1235, 1235, 1235, 1235,    0,    0,    0,    0, 1235, 1236,
        0,    0,    0,    0,    0, 1236,    0, 1236,    0, 1236,

     1236, 1236,    0,    0, 1236, 1236, 1236, 1236, 1236, 1236,
        0,    0,    0,    0, 1236, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1237, 1237, 1237, 1237, 1238,    0, 1238,
     1238,    0,    0,    0, 1238,    0, 1238, 1238, 1238,    0,
        0,    0,    0, 1238, 1239,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1239,
        0, 1239, 1239, 1239,    0,    0,    0,    0, 1239, 1240,
     1240, 1240, 1240,    0,    0, 1240,    0,    0,    0,    0,

        0,    0,    0, 1240,    0,    0, 1240,    0,    0,    0,
     1240,    0, 1240, 1240, 1240,    0,    0,    0, 1240, 1240,
     1241, 1241, 1241, 1241,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1241,    0, 1241, 1241, 1241,    0,
        0, 1241,    0, 1241, 1241, 1241,    0,    0,    0,    0,
     1241, 1242, 1242, 1242, 1242,    0,    0, 1242,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1242,    0, 1242, 1242, 1242,    0,    0,    0,
        0, 1242, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243,

     1243, 1243,    0, 1243, 1243, 1243, 1243, 1243, 1243, 1243,
     1243, 1243, 1243, 1243, 1244,    0, 1244,    0,    0, 1244,
        0, 1244, 1244, 1244,    0,    0,    0,    0, 1244, 1245,
     1245,    0, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1246,    0,    0,    0,    0,    0, 1246,    0, 1246,
     1246, 1246, 1246, 1246,    0,    0, 1246, 1246, 1246, 1246,
     1246, 1246,    0,    0,    0,    0, 1246, 1247,    0,    0,
        0,    0,    0, 1247,    0, 1247,    0, 1247, 1247, 1247,

        0,    0, 1247, 1247, 1247, 1247, 1247, 1247,    0,    0,
        0,    0, 1247, 1248, 1248,    0, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1249, 1249,    0, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1249, 1249, 1249, 1249, 1249, 1249, 1250, 1250,    0,
        0,    0,    0,    0, 1250,    0, 1250, 1250, 1250, 1250,
     1250,    0, 1250, 1250, 1250, 1250, 1250, 1250, 1250,    0,

        0,    0,    0, 1250, 1251,    0,    0,    0,    0,    0,
     1251,    0, 1251,    0, 1251, 1251, 1251,    0,    0, 1251,
     1251, 1251, 1251, 1251, 1251,    0,    0,    0,    0, 1251,
     1252, 1252, 1252, 1252,    0,    0, 1252,    0,    0,    0,
        0,    0,    0,    0, 1252,    0,    0, 1252,    0,    0,
        0, 1252,    0, 1252, 1252, 1252,    0,    0,    0, 1252,
     1252, 1253, 1253, 1253, 1253,    0,    0,    0,    0, 1253,
        0,    0,    0,    0,    0, 1253,    0, 1253, 1253,    0,
        0,    0, 1253,    0, 1253, 1253, 1253,    0,    0,    0,
        0, 1253, 1254, 1254, 1254, 1254,    0,    0, 1254,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1254,    0, 1254, 1254, 1254,    0,    0,
        0,    0, 1254, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255,    0, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1256,    0,    0, 1256,    0,
        0,    0,    0, 1256,    0,    0,    0,    0,    0,    0,
        0, 1256,    0,    0,    0,    0, 1256,    0, 1256, 1256,
     1256,    0,    0,    0,    0, 1256, 1257,    0,    0, 1257,
        0,    0,    0,    0, 1257,    0, 1257, 1257, 1257,    0,

        0,    0,    0, 1257, 1258, 1258,    0, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258,
     1258, 1258, 1258, 1258, 1258, 1258, 1259, 1259,    0, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260, 1260,
        0, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1261,    0,    0,    0,    0,    0, 1261,    0, 1261, 1261,
     1261, 1261, 1261,    0,    0, 1261, 1261, 1261, 1261, 1261,
     1261,    0,    0,    0,    0, 1261, 1262,    0,    0,    0,
        0,    0, 1262,    0, 1262,    0, 1262, 1262, 1262,    0,
        0, 1262, 1262, 1262, 1262, 1262, 1262,    0,    0,    0,
        0, 1262, 1263, 1263, 1263, 1263,    0,    0, 1263,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1263, 1263,
        0,    0,    0, 1263,    0, 1263, 1263, 1263,    0,    0,
        0,    0, 1263, 1264,    0, 1264, 1264, 1264,    0,    0,
        0,    0, 1264, 1265, 1265, 1265, 1265,    0,    0, 1265,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1265,
     1265,    0,    0,    0, 1265,    0, 1265, 1265, 1265,    0,
        0,    0,    0, 1265, 1266, 1266, 1266, 1266,    0,    0,
     1266,    0,    0,    0,    0,    0,    0,    0, 1266,    0,
        0, 1266,    0,    0,    0, 1266,    0, 1266, 1266, 1266,
        0,    0,    0, 1266, 1266, 1267, 1267, 1267, 1267,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1267,
        0, 1267, 1267,    0,    0,    0, 1267,    0, 1267, 1267,
     1267,    0,    0,    0,    0, 1267, 1268, 1268, 1268, 1268,
        0,    0, 1268,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1268,    0, 1268,
     1268, 1268,    0,    0,    0,    0, 1268, 1269,    0,    0,
        0,    0, 1269,    0, 1269, 1269, 1269,    0,    0,    0,
        0, 1269, 1270,    0, 1270,    0,    0,    0,    0, 1270,
        0, 1270, 1270, 1270,    0,    0,    0,    0, 1270, 1271,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1271,    0, 1271, 1271, 1271,    0,
        0,    0,    0, 1271, 1272, 1272,    0, 1272,    0,    0,
        0,    0, 1272,    0, 1272, 1272, 1272,    0,    0,    0,
        0, 1272, 1273, 1273,    0, 1273, 1273, 1273, 1273, 1273,

     1273, 1273, 1273,    0, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273,    0, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1274,    0,    0, 1274,    0,    0,
        0,    0, 1274,    0, 1274, 1274, 1274,    0,    0,    0,
        0, 1274, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275,    0, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1276, 1276,    0, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
     1276, 1276, 1276, 1276, 1276,    0, 1276, 1276, 1276, 1276,

     1276, 1276, 1276, 1276, 1276, 1276, 1277,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1277,    0, 1277, 1277, 1277,    0,    0,    0,    0,
     1277, 1278,    0,    0, 1278,    0,    0,    0,    0, 1278,
        0, 1278, 1278, 1278,    0,    0,    0,    0, 1278, 1279,
     1279,    0, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1280, 1280,    0, 1280,    0, 1280, 1280, 1280, 1280,
     1280, 1280,    0, 1280, 1280, 1280, 1280,    0, 1280, 1280,

     1280, 1280,    0, 1280,    0, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1280, 1281,    0,    0, 1281,    0,    0,    0,
        0, 1281,    0,    0,    0,    0, 1281, 1281,    0, 1281,
        0,    0,    0,    0, 1281,    0, 1281, 1281, 1281, 1282,
     1282,    0, 1282,    0, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
        0, 1282,    0, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283, 1283,    0, 1283,    0, 1283, 1283, 1283, 1283,
     1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283,
     1283, 1283,    0, 1283,    0, 1283, 1283, 1283, 1283, 1283,

     1283, 1283, 1283, 1284,    0,    0, 1284,    0,    0,    0,
        0, 1284,    0, 1284, 1284, 1284,    0,    0,    0,    0,
     1284, 1285, 1285,    0, 1285, 1285, 1285, 1285, 1285, 1285,
        0,    0, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285,    0, 1285,    0, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1285, 1286,    0, 1286, 1286,    0,    0,    0,
     1286,    0, 1286, 1286, 1286,    0,    0,    0,    0, 1286,
     1287,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1287,    0, 1287, 1287, 1287,
        0,    0,    0,    0, 1287, 1288,    0, 1288, 1288,    0,

        0,    0, 1288,    0, 1288, 1288, 1288,    0,    0,    0,
        0, 1288, 1289,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1289,    0, 1289,
     1289, 1289,    0,    0,    0,    0, 1289, 1290, 1290,    0,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,    0, 1290,
        0, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1291,
        0,    0, 1291,    0,    0,    0,    0, 1291,    0, 1291,
     1291, 1291,    0,    0,    0,    0, 1291, 1292, 1292,    0,
     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,

     1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
        0, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1293,
     1293,    0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
        0, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
        0, 1293,    0, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1295,    0, 1295, 1295, 1295, 1295, 1295,    0,    0,
        0, 1295,    0, 1295, 1295, 1295,    0,    0,    0,    0,
     1295, 1296,    0,    0,    0,    0, 1296,    0, 1296, 1296,
     1296,    0,    0,    0,    0, 1296, 1297, 1297,    0, 1297,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,

     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297,    0,
     1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298,    0,    0, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1299, 1299,    0,    0,    0, 1299,    0, 1299, 1299, 1299,
        0,    0,    0,    0, 1299, 1300, 1300,    0, 1300, 1300,
     1300, 1300,    0, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301, 1301,    0,

     1301,    0,    0,    0,    0, 1301,    0, 1301, 1301, 1301,
     1302,    0, 1302, 1302,    0, 1302,    0,    0,    0, 1302,
     1302,    0, 1302, 1302, 1302, 1303,    0,    0, 1303,    0,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1304, 1304,    0,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1305,
        0,    0, 1305,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1305,    0, 1305, 1305, 1305, 1307,    0,    0, 1307,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1307,    0, 1307, 1307,
     1307, 1308, 1308,    0, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
        0, 1308, 1308, 1309,    0,    0,    0,    0,    0,    0,
        0, 1309,    0, 1309, 1309, 1309, 1311,    0,    0, 1311,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0, 1311, 1311, 1311,
     1311, 1311, 1312,    0,    0,    0,    0,    0, 1312,    0,
     1312, 1312, 1312, 1312, 1312,    0,    0, 1312, 1312, 1312,
     1312, 1312, 1312,    0,    0,    0,    0, 1312, 1313,    0,
        0,    0,    0,    0, 1313,    0, 1313, 1313, 1313, 1313,
     1313,    0,    0, 1313, 1313, 1313, 1313, 1313, 1313,    0,
        0,    0,    0, 1313, 1314,    0, 1314, 1314, 1314,    0,
        0,    0,    0, 1314, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,

     1315, 1315, 1315, 1315, 1315, 1315, 1316,    0, 1316,    0,
        0, 1316,    0, 1316, 1316, 1316,    0,    0,    0,    0,
     1316, 1317,    0,    0,    0,    0,    0, 1317,    0, 1317,
     1317, 1317, 1317, 1317,    0,    0, 1317, 1317, 1317, 1317,
     1317, 1317,    0,    0,    0,    0, 1317, 1318,    0,    0,
        0,    0,    0, 1318,    0, 1318, 1318, 1318, 1318, 1318,
        0,    0, 1318, 1318, 1318, 1318, 1318, 1318,    0,    0,
        0,    0, 1318, 1319, 1319,    0, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1319, 1319, 1319, 1319, 1320, 1320,    0,    0,    0,
        0,    0, 1320,    0, 1320, 1320, 1320, 1320, 1320,    0,
     1320, 1320, 1320, 1320, 1320, 1320, 1320,    0,    0,    0,
        0, 1320, 1321, 1321,    0,    0,    0,    0,    0, 1321,
        0, 1321, 1321, 1321, 1321, 1321,    0, 1321, 1321, 1321,
     1321, 1321, 1321, 1321,    0,    0,    0,    0, 1321, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
     1322, 1323,    0,    0, 1323,    0,    0,    0,    0, 1323,

        0,    0,    0,    0,    0,    0,    0, 1323,    0,    0,
        0,    0, 1323,    0, 1323, 1323, 1323,    0,    0,    0,
        0, 1323, 1324,    0,    0,    0,    0,    0, 1324,    0,
     1324, 1324, 1324, 1324, 1324,    0,    0, 1324, 1324, 1324,
     1324, 1324, 1324,    0,    0,    0,    0, 1324, 1325,    0,
        0,    0,    0,    0, 1325,    0, 1325, 1325, 1325, 1325,
     1325,    0,    0, 1325, 1325, 1325, 1325, 1325, 1325,    0,
        0,    0,    0, 1325, 1326, 1326, 1326, 1326,    0,    0,
     1326,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1326, 1326,    0,    0,    0, 1326,    0, 1326, 1326, 1326,

        0,    0,    0,    0, 1326, 1327, 1327, 1327, 1327,    0,
        0, 1327,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1327,    0,    0,    0, 1327,    0, 1327, 1327,
     1327,    0,    0,    0,    0, 1327, 1328, 1328, 1328, 1328,
        0,    0, 1328,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1328, 1328,    0,    0,    0, 1328,    0, 1328,
     1328, 1328,    0,    0,    0,    0, 1328, 1329,    0,    0,
        0,    0, 1329,    0, 1329, 1329, 1329,    0,    0,    0,
        0, 1329, 1330,    0, 1330, 1330, 1330,    0,    0,    0,
        0, 1330, 1331,    0, 1331,    0,    0,    0,    0, 1331,

        0, 1331, 1331, 1331,    0,    0,    0,    0, 1331, 1332,
        0, 1332, 1332, 1332,    0,    0,    0,    0, 1332, 1333,
        0,    0,    0,    0, 1333,    0, 1333, 1333, 1333,    0,
        0,    0,    0, 1333, 1334, 1334, 1334, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1334,    0, 1334, 1334, 1334, 1334,    0, 1334,    0,    0,
     1334, 1334, 1334, 1334, 1334, 1334, 1335,    0, 1335, 1335,
     1335,    0,    0,    0,    0, 1335, 1336,    0, 1336, 1336,
     1336,    0,    0,    0,    0, 1336, 1338,    0, 1338, 1338,
     1338, 1338, 1338,    0,    0,    0, 1338,    0, 1338, 1338,

     1338,    0,    0,    0,    0, 1338, 1339, 1339,    0, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340,    0,
        0, 1340,    0,    0,    0,    0, 1340,    0, 1340, 1340,
     1340, 1341,    0, 1341,    0, 1341, 1341,    0, 1341,    0,
        0,    0, 1341, 1341,    0, 1341, 1341, 1341, 1342, 1342,
        0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,

     1344,    0,    0, 1344,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1344,    0, 1344, 1344, 1344, 1345, 1345,    0, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346,
     1346, 1346, 1346, 1347,    0,    0, 1347,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1347, 1347, 1347, 1347, 1347, 1348,
     1348,    0, 1348,    0,    0,    0,    0,    0,    0,    0,

     1348,    0, 1348, 1348,    0, 1348, 1348,    0,    0, 1348,
     1348,    0, 1348, 1348, 1348,    0, 1348, 1349,    0,    0,
        0,    0,    0, 1349,    0, 1349, 1349, 1349, 1349, 1349,
        0,    0, 1349, 1349, 1349, 1349, 1349, 1349,    0,    0,
        0,    0, 1349, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351,    0,    0,    0,    0,
        0, 1351,    0, 1351, 1351, 1351, 1351, 1351,    0,    0,
     1351, 1351, 1351, 1351, 1351, 1351,    0,    0,    0,    0,

     1351, 1352, 1352,    0, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1352, 1353, 1353,    0,    0,    0,    0,    0,
     1353,    0, 1353, 1353, 1353, 1353, 1353,    0, 1353, 1353,
     1353, 1353, 1353, 1353, 1353,    0,    0,    0,    0, 1353,
     1354,    0,    0,    0,    0,    0, 1354,    0, 1354, 1354,
     1354, 1354, 1354,    0,    0, 1354, 1354, 1354, 1354, 1354,
     1354,    0,    0,    0,    0, 1354, 1355,    0, 1355, 1355,
     1355,    0,    0,    0,    0, 1355, 1356, 1356, 1356, 1356,

        0,    0, 1356,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1356, 1356,    0,    0,    0, 1356,    0, 1356,
     1356, 1356,    0,    0,    0,    0, 1356, 1357, 1357, 1357,
     1357,    0,    0, 1357,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1357,    0,    0,    0, 1357,    0,
     1357, 1357, 1357,    0,    0,    0,    0, 1357, 1358,    0,
     1358,    0,    0,    0,    0, 1358,    0, 1358, 1358, 1358,
        0,    0,    0,    0, 1358, 1359,    0,    0,    0,    0,
     1359,    0, 1359, 1359, 1359,    0,    0,    0,    0, 1359,
     1360, 1360,    0, 1360,    0,    0,    0,    0, 1360,    0,

     1360, 1360, 1360, 1361, 1361,    0, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1362, 1362, 1362, 1362,    0,
        0, 1362,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1362, 1362,    0,    0,    0, 1362,    0, 1362, 1362,
     1362,    0,    0,    0,    0, 1362, 1363, 1363, 1363, 1363,
     1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363,
     1363, 1363, 1363,    0, 1363, 1363, 1363, 1363,    0, 1363,
        0, 1363,    0, 1363, 1363, 1363, 1363, 1363, 1364, 1364,

        0, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1364,
     1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1365, 1365, 1365, 1365, 1365, 1365, 1365,    0, 1365, 1365,
     1365, 1365,    0, 1365,    0,    0,    0, 1365, 1365, 1365,
     1365, 1365, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,    0,
     1366, 1366, 1366, 1366,    0, 1366,    0,    0,    0, 1366,
     1366, 1366, 1366, 1366, 1367, 1367, 1367, 1367, 1367, 1367,

     1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367,
     1367,    0, 1367, 1367, 1367, 1367,    0, 1367,    0,    0,
        0, 1367, 1367, 1367, 1367, 1367, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368,    0, 1368, 1368, 1368, 1368,    0, 1368,
        0,    0,    0, 1368, 1368, 1368, 1368, 1368, 1369, 1369,
        0, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,

     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137, 1137, 1137, 1137
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2015 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 20 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleHideCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleHideCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "startuml",        &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "hidecallgraph",   &handleHideCallgraph,    FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "hidecallergraph", &handleHideCallergraph,  FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "exception",       0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}


static void addAnchor(const char *anchor)
{
  SectionInfo *si = Doxygen::sectionDict->find(anchor);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",anchor,si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",anchor,si->fileName.data());
    }
  }
  else
  {
    si = new SectionInfo(yyFileName,yyLineNr,anchor,0,SectionInfo::Anchor,0);
    Doxygen::sectionDict->append(anchor,si);
    current->anchors->append(si);
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */









































#line 4077 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/commentscan.cpp"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * _in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * _out_str  );

yy_size_t commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	{
#line 1004 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4365 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/commentscan.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1138 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1137 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1023 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1026 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1029 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1032 "commentscan.l"
{ // quoted text
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1035 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1038 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1043 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1051 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1055 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1059 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1063 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1066 "commentscan.l"
{
                                          QCString tag=commentscanYYtext;
                                          int s=tag.find("id=");
                                          if (s!=-1) // command has id attribute
                                          {
                                            char c=tag[s+3];
                                            if (c=='\'' || c=='"') // valid start
                                            {
                                              int e=tag.find(c,s+4);
                                              if (e!=-1) // found matching end
                                              {
                                                QCString id=tag.mid(s+4,e-s-4); // extract id
                                                addAnchor(id);
                                              }
                                            }
                                          }
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1084 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1088 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1092 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1096 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1099 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1107 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && !(inContext==OutputXRef && cmdName=="parblock"))
					    {
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1153 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1156 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1176 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1181 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1186 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1190 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MAJOR_VERSION>=2 && (YY_FLEX_MINOR_VERSION>5 || (YY_FLEX_MINOR_VERSION==5 && YY_FLEX_SUBMINOR_VERSION>=33))
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1203 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext); 
					}
	YY_BREAK
case 29:
#line 1213 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1213 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1228 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1236 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1239 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1242 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1245 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1248 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1251 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1254 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1257 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1261 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1264 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1267 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1270 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1301 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1309 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1313 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
#line 1320 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1321 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1324 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1326 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
#line 1331 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1336 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1341 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1347 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext; 
 					} 
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1350 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1355 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1361 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1365 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1369 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1377 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1382 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1386 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1390 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1399 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
#line 1404 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1408 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1412 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1421 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1426 "commentscan.l"
{ 
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1430 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1439 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1443 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1447 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1456 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1459 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1463 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1467 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1472 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1475 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1479 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1483 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1487 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 83:
YY_RULE_SETUP
#line 1492 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1504 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1508 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1517 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1521 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1525 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
#line 1542 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1546 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1549 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1558 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1560 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1569 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1574 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1578 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1581 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 98:
YY_RULE_SETUP
#line 1586 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1591 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1595 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1604 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1607 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1611 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1615 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1624 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1627 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1632 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1636 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1645 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 110:
YY_RULE_SETUP
#line 1651 "commentscan.l"
{ // argument
  					  current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1659 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1663 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1671 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1677 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1682 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1686 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 117:
YY_RULE_SETUP
#line 1692 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1698 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1706 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1712 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1717 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1722 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1726 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1730 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1734 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1738 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 127:
YY_RULE_SETUP
#line 1745 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1752 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1760 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1764 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1768 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 132:
YY_RULE_SETUP
#line 1775 "commentscan.l"
{ // found argument
                                          addAnchor(commentscanYYtext);
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1780 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1788 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1798 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1805 "commentscan.l"
{
  					  addOutput(commentscanYYtext);
					  if (blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1812 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1815 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1823 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1832 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1835 "commentscan.l"
{
                                          QCString endTag = "@end"+blockName;
                                          if (blockName=="startuml") endTag="enduml";
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @%s tag!",
	                                    blockName.data(),endTag.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 142:
YY_RULE_SETUP
#line 1847 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1852 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1855 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1859 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1867 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1873 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1876 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1882 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1886 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1889 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1893 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1901 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1908 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1912 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1916 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1934 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1951 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1967 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1971 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1973 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1979 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1983 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1986 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1989 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1997 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2004 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2011 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2018 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2025 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
					  BEGIN(Comment);
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2029 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2031 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 2037 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2042 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2047 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 176:
YY_RULE_SETUP
#line 2054 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2060 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2071 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2075 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2081 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2090 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2094 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2097 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2101 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2105 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2113 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2127 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2131 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 189:
YY_RULE_SETUP
#line 2137 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2143 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2151 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 192:
YY_RULE_SETUP
#line 2160 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2166 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2174 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 195:
YY_RULE_SETUP
#line 2179 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum(OUTPUT_LANGUAGE),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2187 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2189 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2192 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 199:
YY_RULE_SETUP
#line 2197 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2202 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2210 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2219 "commentscan.l"
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 2220 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2229 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2233 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2239 "commentscan.l"
ECHO;
	YY_BREAK
#line 6532 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/commentscan.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1138 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1138 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1137);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; // After all that talk, this was set to 1 anyways...
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void commentscanYYset_lineno (int  _line_number )
{
    
    commentscanYYlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  _in_str )
{
        commentscanYYin = _in_str ;
}

void commentscanYYset_out (FILE *  _out_str )
{
        commentscanYYout = _out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  _bdebug )
{
        commentscanYY_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
			free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2239 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallgraph(const QCString &)
{
  current->callGraph = FALSE; // OFF
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleHideCallergraph(const QCString &)
{
  current->callerGraph = FALSE; // OFF
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool(INTERNAL_DOCS))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",qPrint(fileName),lineNr,qPrint(comment)
              );
  
  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,qPrint(current->brief),
               current->docLine,qPrint(current->doc),
               current->inbodyLine,qPrint(current->inbodyDocs)
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int line,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x,file=%s,line=%d) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,fileName,line,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->docLine = line;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    if (!foundInline) e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = e->docFile;
      info->docLine = e->docLine;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


