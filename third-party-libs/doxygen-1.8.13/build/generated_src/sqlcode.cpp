#line 2 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/sqlcode.cpp"

#line 4 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/sqlcode.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer sqlcodeYY_create_buffer
#define yy_delete_buffer sqlcodeYY_delete_buffer
#define yy_flex_debug sqlcodeYY_flex_debug
#define yy_init_buffer sqlcodeYY_init_buffer
#define yy_flush_buffer sqlcodeYY_flush_buffer
#define yy_load_buffer_state sqlcodeYY_load_buffer_state
#define yy_switch_to_buffer sqlcodeYY_switch_to_buffer
#define yyin sqlcodeYYin
#define yyleng sqlcodeYYleng
#define yylex sqlcodeYYlex
#define yylineno sqlcodeYYlineno
#define yyout sqlcodeYYout
#define yyrestart sqlcodeYYrestart
#define yytext sqlcodeYYtext
#define yywrap sqlcodeYYwrap
#define yyalloc sqlcodeYYalloc
#define yyrealloc sqlcodeYYrealloc
#define yyfree sqlcodeYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE sqlcodeYYrestart(sqlcodeYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t sqlcodeYYleng;

extern FILE *sqlcodeYYin, *sqlcodeYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up sqlcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up sqlcodeYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via sqlcodeYYrestart()), so that the user can continue scanning by
	 * just pointing sqlcodeYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when sqlcodeYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t sqlcodeYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow sqlcodeYYwrap()'s to do buffer switches
 * instead of setting up a fresh sqlcodeYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void sqlcodeYYrestart (FILE *input_file  );
void sqlcodeYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE sqlcodeYY_create_buffer (FILE *file,int size  );
void sqlcodeYY_delete_buffer (YY_BUFFER_STATE b  );
void sqlcodeYY_flush_buffer (YY_BUFFER_STATE b  );
void sqlcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void sqlcodeYYpop_buffer_state (void );

static void sqlcodeYYensure_buffer_stack (void );
static void sqlcodeYY_load_buffer_state (void );
static void sqlcodeYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER sqlcodeYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE sqlcodeYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE sqlcodeYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE sqlcodeYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *sqlcodeYYalloc (yy_size_t  );
void *sqlcodeYYrealloc (void *,yy_size_t  );
void sqlcodeYYfree (void *  );

#define yy_new_buffer sqlcodeYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        sqlcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sqlcodeYY_create_buffer(sqlcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        sqlcodeYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sqlcodeYY_create_buffer(sqlcodeYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sqlcodeYYwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *sqlcodeYYin = (FILE *) 0, *sqlcodeYYout = (FILE *) 0;

typedef int yy_state_type;

extern int sqlcodeYYlineno;

int sqlcodeYYlineno = 1;

extern char *sqlcodeYYtext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr sqlcodeYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up sqlcodeYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	sqlcodeYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 14
#define YY_END_OF_BUFFER 15
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1115] =
    {   0,
        0,    0,    0,    0,   15,   13,   12,   12,   13,   13,
       11,   13,    1,   13,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    8,    9,    8,
        8,   12,    0,    1,    0,    6,   11,    7,    1,    5,
       11,   11,   11,   11,    2,    2,   11,   11,   11,   11,
       11,    2,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    3,   11,    2,    2,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        2,   11,   11,    2,   11,    2,   11,    2,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        2,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        9,   10,    6,    6,    2,    2,   11,    2,    2,    2,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    2,   11,    4,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,    3,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    2,   11,   11,   11,   11,    2,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    4,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    2,   11,    2,   11,   11,   11,    2,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,   11,   11,   11,   11,   11,    2,
       11,   11,   11,   11,   11,   11,   11,    2,   11,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    4,   11,    2,    2,   11,    3,    2,    4,   11,
        4,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,   11,   11,   11,    4,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    2,   11,    2,
       11,    3,   11,   11,   11,    2,   11,   11,   11,   11,
       11,   11,   11,    2,    2,    2,   11,   11,   11,   11,
       11,    2,    2,   11,   11,   11,   11,   11,   11,   11,

       11,    2,   11,    2,   11,   11,   11,   11,    2,    2,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,    1,   11,   11,    2,    2,
       11,   11,   11,    2,   11,   11,   11,   11,   11,   11,
       11,   11,    4,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,    2,    4,   11,   11,   11,   11,    1,
       11,   11,   11,   11,   11,   11,   11,    2,   11,   11,
       11,   11,   11,    2,   11,   11,   11,   11,    2,    2,

       11,    2,    4,   11,   11,   11,   11,    3,   11,   11,
       11,   11,   11,   11,   11,    2,    2,   11,   11,   11,
       11,   11,   11,   11,   11,    2,   11,   11,    2,   11,
       11,   11,   11,   11,    2,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,    1,    2,
       11,    4,   11,   11,   11,    2,    2,   11,   11,   11,
       11,    2,    2,    2,   11,   11,   11,   11,   11,   11,
        2,   11,   11,    2,    2,   11,    2,   11,   11,   11,
       11,    2,   11,   11,   11,    4,    4,   11,   11,    2,
        2,   11,   11,   11,   11,   11,   11,   11,   11,    2,

        2,   11,   11,   11,   11,   11,   11,   11,    2,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,    2,   11,   11,   11,   11,    2,
       11,   11,   11,   11,    2,   11,   11,    2,   11,   11,
       11,   11,    2,    2,    2,   11,   11,   11,   11,   11,
        2,    3,   11,   11,   11,   11,   11,   11,   11,    2,
       11,   11,    4,    4,   11,    2,   11,   11,   11,    2,
        2,   11,   11,   11,   11,    2,   11,    2,   11,   11,
       11,   11,    2,   11,   11,   11,   11,    4,   11,   11,
       11,    2,    2,   11,    2,   11,    2,   11,   11,    2,

       11,    2,   11,   11,   11,   11,    2,   11,   11,   11,
       11,   11,   11,   11,   11,    2,    2,    2,   11,    2,
       11,   11,   11,   11,   11,    2,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,    2,    2,    2,   11,    2,   11,    2,    2,    2,
        2,   11,   11,   11,   11,   11,   11,   11,   11,    2,
       11,   11,    2,   11,   11,   11,   11,   11,   11,    2,
       11,    2,    2,    2,   11,   11,   11,   11,   11,   11,
        2,    2,   11,   11,   11,   11,   11,    2,    4,   11,
       11,    2,    2,   11,   11,   11,    2,   11,    4,    2,

        2,   11,   11,   11,   11,    2,    2,   11,    2,   11,
        2,   11,   11,   11,   11,   11,   11,    4,   11,   11,
       11,   11,    2,    2,   11,   11,   11,   11,    2,    4,
       11,   11,   11,   11,   11,    2,    2,   11,   11,   11,
       11,   11,   11,    2,   11,   11,   11,    2,    2,   11,
       11,   11,   11,    2,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,    2,    2,    1,    4,
        2,    2,   11,   11,   11,    2,    2,   11,   11,   11,
        2,   11,   11,    2,   11,   11,   11,    2,   11,   11,
        2,    2,    2,    2,    2,    2,   11,   11,   11,   11,

        2,   11,    2,   11,    2,    2,    2,    4,    2,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    2,
        2,    2,    2,   11,   11,   11,    4,    2,   11,    2,
       11,   11,   11,   11,   11,   11,    2,   11,    2,    2,
       11,   11,   11,   11,    4,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,    2,    2,   11,    2,    2,
        2,    2,    2,    2,    2,    2,   11,   11,    2,    2,
       11,   11,   11,    2,    2,   11,   11,   11,   11,   11,
        2,   11,    4,   11,   11,   11,    2,    2,   11,    2,
       11,   11,   11,   11,   11,   11,   11,   11,    2,   11,

        2,   11,   11,    2,   11,   11,    2,   11,   11,   11,
        2,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    2,   11,    2,
       11,   11,   11,   11,    2,    2,   11,   11,    2,   11,
       11,   11,    2,   11,    2,    2,    2,   11,    2,   11,
       11,   11,    2,    2,    2,   11,   11,    2,    2,    2,
       11,   11,   11,    2,   11,   11,    2,   11,   11,   11,
       11,    2,    2,   11,   11,   11,   11,    2,   11,   11,
       11,   11,    2,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
        2,   11,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    1,    5,    1,
        1,    6,    1,    1,    7,    1,    8,    9,    9,   10,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1,    1,    1,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
        1,    1,    1,    1,   38,    1,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[65] =
    {   0,
        1,    2,    1,    1,    1,    1,    3,    1,    3,    3,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3
    } ;

static yyconst flex_uint16_t yy_base[1122] =
    {   0,
        0,    0,   63,   65,  434, 2265, 2265,  388,  382,  340,
      336,  334,   63,    0,   59,  103,  155,  207,  259,  310,
       54,   67,  355,   49,    0,  112,  401,  449,  493,   66,
      115,  542,  594,  118,   64,   61,   69, 2265, 2265,  310,
      302, 2265,  295, 2265,  290,  192,    0, 2265,   77,    0,
       79,  102,  127,  170,  166,   87,   99,  186,  119,  123,
      154,    0,  192,  167,  163,  216,  204,  208,  210,  222,
      639,  195,  196,  206,  209,  221,  249,  241,  255,  277,
      250,  243,  252,  250,  248,  262,  294,  255,  261,  311,
      274,  306,  309,    0,  303,  683,  302,  311,  342,  364,

      310,  327,  316,  353,  323,  336,  339,  352,  368,  358,
      370,  392,  381,    0,  381,  379,  389,  409,  394,  410,
      401,  415,  412,  730,  421,  422,  413,  418,  779,  425,
      438,  435,  451,  446,  458,  458,  454,  466,  464,  461,
        0,  501,  457,  539,  488,  484,  534,  503,  540,  489,
     2265, 2265,    0,  621,    0,  498,  551,    0,    0,    0,
      560,  550,  552,  553,  561,  588,  575,  590,  599,  599,
      592,  597,  594,  614,  590,  607,  636,  629,  607,  629,
      634,  652,  635,  651,  644,  652,  661,    0,  661,  683,
      673,  683,  689,  693,  700,  708,  705,  692,  711,  705,

      703,  712,  283,  717,  715,  724,  722,  741,  729,  748,
      736,  756,  754,  756,  749,  753,  764,    0,  768,  760,
      760,  776,  783,  772,  781,  791,  791,  797,  782,  783,
      800,  801,  798,  797,  806,  808,  814,  817,  804,  823,
      833,  832,  834,  832,  833,  823,  836,  827,  829,  843,
      849,  838,    0,  849,    0,  844,  853,  841,    0,  835,
      851,  862,  873,  851,  881,  872,  857,  870,  883,  891,
      872,  893,  881,  899,  885,  886,  893,  902,  899,  893,
      908,  899,  900,  904,  916,  904,  905,    0,  918,  917,
      927,  933,  938,  924,  934,  936,  932,  941,  941,  953,

      951,  961,  957,  961,  964,  958,  954,  967,  976,  973,
      963,  969,  965,  987,  983,  984,  978,  999,  998,  989,
     1006,  993,  990,  997, 1005, 1010, 1005, 1007, 1017, 1012,
     1009,    0, 1024,    0, 1026, 1031,    0,    0, 1034, 1026,
        0, 1035, 1040, 1031, 1041, 1046, 1032, 1046, 1052, 1040,
     1042,    0, 1058, 1050, 1061,    0, 1057, 1057, 1071, 1052,
     1054, 1069, 1058, 1062, 1066, 1074, 1073,    0, 1073,    0,
     1084,    0, 1086, 1078, 1079, 1077, 1084, 1087, 1101, 1101,
     1106, 1094, 1106,    0,    0,    0, 1097, 1118, 1100, 1107,
     1110,    0,    0, 1106, 1123, 1125, 1111, 1110, 1114, 1121,

     1130,    0, 1139,    0, 1122, 1140, 1131, 1143,    0,    0,
     1146, 1151, 1155, 1158, 1150, 1148, 1163, 1159, 1165, 1165,
     1162, 1160, 1162, 1179,    0,    0, 1164, 1180,    0,    0,
     1166, 1170, 1168, 1179, 1180, 1185, 1188, 1198, 1201, 1198,
     1201, 1193,    0, 1195, 1196,  243, 1216, 1207, 1204, 1212,
     1205, 1226,    0, 1211, 1219, 1229, 1220, 1232, 1227, 1228,
     1226, 1230,    0, 1234, 1221, 1228, 1250, 1233, 1247, 1236,
     1255, 1261, 1262,    0, 1260, 1256, 1252, 1253, 1269,    0,
     1276, 1267, 1261, 1270, 1269, 1269, 1272,    0, 1284, 1287,
     1288, 1288, 1283, 1296, 1300, 1302, 1302, 1296, 1305,    0,

     1320,    0,    0, 1313, 1320, 1324, 1312,    0, 1326, 1313,
     1310, 1335, 1335, 1336, 1339,    0,    0, 1323, 1330, 1325,
     1343, 1332, 1337, 1334, 1350,    0, 1342, 1341,    0, 1346,
     1363, 1347, 1356, 1369,    0, 1366, 1363, 1365, 1367, 1379,
     1376, 1373, 1365, 1385, 1373, 1374, 1377, 1383,    0,    0,
     1380,    0, 1392, 1391, 1392,    0, 1396, 1400, 1400, 1401,
     1412,    0,    0,    0, 1396, 1398, 1414, 1411, 1402, 1427,
        0, 1428, 1421, 1418,    0, 1421,    0, 1437, 1438, 1435,
     1442,    0, 1429, 1436, 1450,    0,    0, 1443, 1445,    0,
        0, 1434, 1457, 1454, 1441, 1444, 1446, 1449, 1465,    0,

        0, 1453, 1468, 1500, 1464, 1464, 1473, 1484,    0, 1492,
     1479, 1482, 1486, 1494, 1500, 1485, 1486, 1492, 1507, 1503,
     1507, 1512, 1516, 1503,    0, 1520, 1514, 1507, 1524,    0,
     1518, 1526, 1534, 1535,    0, 1544, 1535,    0, 1547, 1532,
     1536, 1552,    0,    0, 1539, 1558, 1546, 1546, 1561, 1541,
        0,    0,  200, 1543, 1553, 1548, 1551, 1552, 1553,    0,
     1566, 1563,    0,    0, 1566,    0, 1576, 1571, 1587,    0,
        0, 1575, 1596, 1580, 1587,    0, 1585,    0, 1603, 1597,
     1605, 1591,    0, 1610, 1604, 1600, 1612,    0, 1613, 1597,
     1615,    0,    0, 1616,    0, 1622,    0, 1611, 1611,    0,

     1613,    0, 1609, 1630, 1614, 1626,    0, 1627, 1641, 1648,
     1642, 1648, 1645, 1652, 1651,    0,    0,    0, 1658,    0,
     1659, 1664, 1654, 1664, 1667,    0, 1653, 1650, 1662, 1665,
     1670, 1652, 1658, 1671, 1667, 1661, 1670, 1674,  182, 1693,
     1684,    0, 1680,    0, 1697,    0, 1694,    0,    0,    0,
        0, 1700, 1697, 1695, 1700, 1710, 1715, 1701, 1708,    0,
     1703, 1706,  150, 1724, 1714, 1715, 1730, 1715, 1729,    0,
     1721,    0,    0,    0, 1719, 1732, 1726, 1730, 1748, 1752,
        0,    0, 1737, 1754, 1754, 1747, 1741,    0,    0, 1764,
     1766,    0,    0, 1763, 1768, 1759,  139, 1774,    0,    0,

        0, 1771, 1763, 1773, 1759,    0,    0, 1779,    0, 1771,
        0, 1771, 1780, 1763, 1769, 1776, 1773,    0, 1793, 1785,
     1792, 1803,    0,    0, 1798, 1794, 1797, 1807,    0,    0,
     1803, 1803, 1820, 1811, 1812,    0,    0, 1810, 1807, 1827,
     1824, 1811, 1813,    0, 1821, 1817, 1812,    0,    0, 1828,
     1829, 1823,  135,    0, 1827, 1847, 1835, 1856, 1853, 1856,
     1858, 1850, 1860, 1870, 1869, 1859,    0,    0,    0,    0,
        0,    0, 1864, 1863, 1861,    0,    0, 1861, 1875, 1884,
        0, 1868, 1873,    0, 1876, 1914, 1873,    0, 1886, 1893,
        0,    0,    0,    0,    0,    0, 1892, 1881, 1892, 1884,

        0, 1901,    0, 1911,    0,    0,    0,    0,    0, 1901,
     1907, 1911, 1922, 1924, 1928, 1914, 1922, 1935, 1925,    0,
        0,    0,    0, 1924, 1942, 1928,    0, 1930, 1931,    0,
     1939, 1936, 1955, 1950, 1954,  109,    0, 1963,    0,    0,
     1970, 1970, 1976, 1961,    0, 1963, 1980, 1985, 1986, 1973,
     1980, 1972, 1987, 1974, 1974,    0,    0, 1973,    0,    0,
     1982,    0,    0,    0,    0,    0, 1984, 1990,    0,    0,
     1985, 1989, 2004,    0,    0, 1993, 1998, 2015, 2019, 2022,
        0, 2024,    0, 2025, 2020, 2026,    0,    0, 2031,    0,
     2032, 2022, 2037, 2024, 2033, 2033, 2046, 2043,    0, 2029,

        0, 2047, 2035,    0, 2050, 2055,    0, 2054, 2045, 2048,
        0, 2046, 2059, 2063, 2071, 2067, 2078, 2072, 2075, 2086,
     2091, 2086, 2090, 2091, 2083, 2080, 2090,    0, 2099,    0,
     2096, 2084, 2098, 2092,    0,    0, 2088, 2097,    0, 2092,
     2099, 2108,    0, 2096,    0,    0, 2101, 2112,    0, 2129,
     2121, 2119,    0,    0,    0, 2119, 2120,    0,    0,    0,
     2131, 2125, 2140,    0, 2132, 2129,    0, 2130, 2131, 2151,
     2138,    0,    0, 2149,   98, 2142, 2138,    0, 2137, 2144,
     2150, 2147,    0,   76, 2165, 2160, 2155, 2153, 2155, 2170,
     2180, 2167, 2174, 2175, 2177,   62, 2184, 2193,   61, 2185,

     2195, 2185, 2186,   60, 2190, 2186, 2186, 2183, 2193, 2194,
        0, 2206,    0, 2265, 2249, 2252, 2255,   93,   89, 2258,
     2261
    } ;

static yyconst flex_int16_t yy_def[1122] =
    {   0,
     1114,    1, 1115, 1115, 1114, 1114, 1114, 1114, 1116, 1117,
     1118, 1114, 1118, 1119, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1114, 1114, 1114,
     1114, 1114, 1116, 1114, 1117, 1120, 1118, 1114, 1118, 1119,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1114, 1114, 1121, 1120, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,

     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118,
     1118, 1118, 1118,    0, 1114, 1114, 1114, 1114, 1114, 1114,
     1114
    } ;

static yyconst flex_uint16_t yy_nxt[2330] =
    {   0,
        6,    7,    8,    9,   10,    6,   11,   12,   13,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   25,   31,   32,
       33,   34,   35,   36,   25,   37,   25,   25,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   25,   31,   32,   33,   34,   35,
       36,   25,   37,   25,   39,   40,   39,   40,   41,   88,
       41,   49,   49,   51,   98,  147,   89,  121,   91,  148,
      149,   52,   90,   53,  150,   49,   49,   54,   55,   56,
       57,   50,   92,  155,  122,   47,   88, 1106, 1101, 1098,

       51,   98,  147,   89,  121,   91,  148,  149,   52,   90,
       53,  150,  164, 1086,   54,   55,   56,   57,   58,   92,
      155,  122,   59,   99,  156,   60,  123,  100,   61,  165,
      124,  101,  157,  143,  125, 1079,  168,  102,   62,  164,
      126,  158,  144,  169,  145,   58,  984,  146,  170,   59,
       99,  156,   60,  123,  100,   61,  165,  124,  101,  157,
      143,  125,  159,  168,  102,   62,   63,  126,  158,  144,
      169,  145,  926,   64,  146,  170,  886,   65,  175,  171,
       66,  162,  176,   67,  172,  160,   68,  862,  177,  159,
       69,  844,  153,   63,  153,  153,  153,  153,  161,  153,

       64,  163,  153,  166,   65,  175,  171,   66,  162,  176,
       67,  172,  160,   68,  173,  177,  167,   69,   70,  182,
      184,  174,   71,  186,  196,  161,   72,  197,  163,  183,
      166,  198,   73,  199,  200,   74,  185,  780,  178,  179,
      180,  173,   75,  167,  181,   70,  182,  184,  174,   71,
      186,  196,  187,   72,  197,  203,  183,  188,  198,   73,
      199,  200,   74,  185,  201,  178,  179,  180,  204,   75,
       76,  181,  209,  210,  211,  212,  213,  214,  202,  187,
      604,   77,  203,   78,  188,  218,  219,  215,   79,  373,
      205,  201,  206,   80,   44,  204,  207,   76,   44,  209,

      210,  211,  212,  213,  214,  202,  222,  208,   77,  152,
       78,  151,  218,  219,  215,   79,  216,  205,  217,  206,
       80,   81,  220,  207,  225,   82,  226,  233,  223,   83,
      234,  240,   84,  222,  208,   85,  221,  224,   86,   48,
      241,   87,   46,  216,   44,  217,  242,  246,   81,  220,
      247,  225,   82,  226,  233,  223,   83,  234,  240,   84,
      248,  249,   85,  221,  224,   86,  235,  241,   87,   93,
      236,   94,  237,  242,  246,  238,  243,  247,   95,   96,
      239,  244,  250,  245,   97,   44,  251,  248,  249,   42,
      252,  253,  258,  235,  254,  259,   93,  236,   94,  237,

      255,  260,  238,  243,  261,   95,   96,  239,  244,  250,
      245,   97,  103,  251,  256,  257,  104,  252,  253,  258,
      105,  254,  259,  262,  263,  264,  106,  255,  260,  265,
      266,  261,  107, 1114,  267, 1114,  269, 1114,  278,  103,
      268,  256,  257,  104,  279,  281,  282,  105,  289,  290,
      262,  263,  264,  106, 1114,  280,  265,  266,  291,  107,
      108,  267,  109,  269,  110,  278,  292,  268,  293,  294,
      295,  279,  281,  282,  111,  289,  290,  296,  298,  299,
      112,  113,  280,  297,  300,  291,  305,  108, 1114,  109,
     1114,  110, 1114,  292, 1114,  293,  294,  295, 1114,  311,

      320,  111,  309,  312,  296,  298,  299,  112,  113,  114,
      297,  300,  301,  305,  310,  115,  302,  116,  315,  117,
      303,  118,  316,  321,  119,  120,  311,  320, 1114,  309,
      312, 1114,  304, 1114, 1114, 1114,  114, 1114, 1114,  301,
     1114,  310,  115,  302,  116,  315,  117,  303,  118,  316,
      321,  119,  120,  127,  317,  128,  313,  129,  306,  304,
      307,  130,  314,  308,  318,  131,  322,  132,  133,  134,
      319,  323,  135,  136,  324,  325,  326,  137, 1114,  327,
      127,  317,  128,  313,  129,  306, 1114,  307,  130,  314,
      308,  318,  131,  322,  132,  133,  134,  319,  323,  135,

      136,  324,  325,  326,  137,  138,  327,  328,  329,  330,
      331,  332,  139,  140,  333,  334,  335, 1114,  339,  141,
      340,  153,  142,  153,  153,  153,  153,  336,  153,  337,
      345,  153,  138, 1114,  328,  329,  330,  331,  332,  139,
      140,  333,  334,  335,  338,  339,  141,  340,  341,  142,
      189,  343,  190,  346,  336,  191,  337,  345,  347,  348,
      344,  192,  349,  350,  351,  342,  352,  193,  194,  195,
     1114,  338,  353,  354,  355,  341,  356,  189,  343,  190,
      346, 1114,  191,  357,  360,  347,  348,  344,  192,  349,
      350,  351,  342,  352,  193,  194,  195,  227,  361,  353,

      354,  355,  358,  356,  362,  359,  363,  228,  229,  230,
      357,  360,  231,  232, 1114,  364, 1114,  367,  368, 1114,
     1114,  365,  369,  370,  227,  361,  371,  372,  374,  358,
      375,  362,  359,  363,  228,  229,  230,  376,  366,  231,
      232,  270,  364,  271,  367,  368,  272,  273,  365,  369,
      370,  377,  274,  371,  372,  374,  378,  375,  379,  275,
      276,  380,  277, 1114,  376,  366,  381,  382,  270,  383,
      271,  384,  385,  272,  273,  386, 1114,  387,  377,  274,
      388, 1114, 1114,  378,  389,  379,  275,  276,  380,  277,
      283,  390,  284,  381,  382,  391,  383,  392,  384,  385,

      393,  285,  386,  286,  387,  394,  395,  388,  287,  288,
      396,  389,  397,  398,  399,  400,  401,  283,  390,  284,
      403,  404,  391,  405,  392,  406,  402,  393,  285,  407,
      286,  408,  394,  395,  409,  287,  288,  396,  410,  397,
      398,  399,  400,  401,  411,  412,  413,  403,  404,  414,
      405,  415,  406,  402,  416,  417,  407,  419,  408,  420,
      423,  409,  421,  424,  425,  410,  426,  418,  427,  428,
      429,  411,  412,  413,  422,  430,  414,  431,  415,  434,
      439,  416,  417,  440,  419,  437,  420,  423,  432,  421,
      424,  425,  435,  426,  418,  427,  428,  429,  438,  433,

      441,  422,  430,  444,  431,  442,  434,  439,  445,  446,
      440,  436,  437,  443,  447,  432,  448,  449,  450,  435,
      451,  452,  453,  454,  455,  438,  433,  441,  456,  457,
      444,  458,  442,  459,  460,  445,  446,  461,  436,  462,
      443,  447,  463,  448,  449,  450,  464,  451,  452,  453,
      454,  455,  468,  465,  469,  456,  457,  470,  458,  471,
      459,  460,  472,  473,  461,  474,  462,  466,  475,  463,
      476,  467,  478,  464,  479,  477,  480,  481,  484,  468,
      465,  469,  485,  482,  470,  483,  471,  486,  487,  472,
      473,  488,  474,  489,  466,  475,  490,  476,  467,  478,

      491,  479,  477,  480,  481,  484,  496,  494,  497,  485,
      482,  495,  483,  498,  486,  487,  499,  500,  488,  501,
      489,  502,  492,  490,  493,  503,  504,  491,  505,  506,
      507,  508,  509,  496,  494,  497,  510,  511,  495,  512,
      498,  513,  514,  499,  500,  515,  501,  516,  502,  492,
      517,  518,  503,  504,  519,  505,  506,  507,  508,  509,
      520,  521,  522,  510,  511,  523,  512,  524,  513,  514,
      525,  526,  515,  527,  516,  528,  529,  517,  518,  530,
      531,  519,  532,  533,  534,  535,  536,  520,  521,  522,
      537,  538,  523,  539,  524,  540,  541,  525,  526,  542,

      527,  543,  528,  529,  544,  545,  530,  531,  546,  532,
      533,  534,  535,  536,  547,  548,  549,  537,  538,  550,
      539,  551,  540,  541,  552,  553,  542,  554,  543,  555,
      556,  544,  545,  557,  558,  546,  559,  560,  561,  562,
      563,  547,  548,  549,  564,  565,  550,  567,  551,  566,
      569,  552,  553,  570,  554,  571,  555,  556,  568,  572,
      557,  558,  573,  559,  560,  561,  562,  563,  574,  575,
      576,  564,  565,  577,  567,  578,  566,  569,  579,  580,
      570,  581,  571,  582,  583,  568,  572,  584,  585,  573,
      586,  587,  588,  589,  590,  574,  575,  576,  591,  592,

      577,  593,  578,  594,  595,  579,  580,  596,  581,  597,
      582,  583,  598,  599,  584,  585,  600,  586,  587,  588,
      589,  590,  601,  602,  603,  591,  592,  605,  593,  606,
      594,  595,  607,  608,  596,  609,  597,  612,  610,  598,
      599,  613,  614,  600,  615,  616,  617,  618,  619,  601,
      602,  603,  620,  621,  605,  622,  606,  611,  623,  607,
      608,  624,  609,  625,  612,  610,  626,  627,  613,  614,
      628,  615,  616,  617,  618,  619,  629,  630,  633,  620,
      621,  634,  622,  635,  611,  623,  636,  637,  624,  631,
      625,  638,  639,  626,  627,  640,  632,  628,  641,  642,

      643,  644,  645,  629,  630,  633,  646,  647,  634,  648,
      635,  650,  649,  636,  637,  651,  631,  652,  638,  639,
      653,  654,  640,  632,  655,  641,  642,  643,  644,  645,
      656,  657,  658,  646,  647,  659,  648,  660,  650,  649,
      661,  662,  651,  663,  652,  664,  665,  653,  654,  666,
      667,  655,  668,  669,  670,  671,  672,  656,  657,  658,
      673,  674,  659,  675,  660,  676,  677,  661,  662,  678,
      663,  679,  664,  665,  680,  681,  666,  667,  682,  668,
      669,  670,  671,  672,  683,  684,  685,  673,  674,  686,
      675,  687,  676,  677,  688,  689,  678,  690,  679,  691,

      692,  680,  681,  693,  694,  682,  695,  696,  697,  698,
      699,  683,  684,  685,  700,  701,  686,  702,  687,  703,
      704,  688,  689,  705,  690,  706,  691,  692,  707,  708,
      693,  694,  711,  695,  696,  697,  698,  699,  712,  713,
      709,  700,  701,  710,  702,  714,  703,  704,  715,  716,
      705,  717,  706,  718,  719,  707,  708,  720,  721,  711,
      722,  723,  724,  725,  726,  712,  713,  709,  727,  728,
      710,  729,  714,  730,  731,  715,  716,  732,  717,  733,
      718,  719,  734,  735,  720,  721, 1114,  722,  723,  724,
      725,  726, 1114,  741,  742,  727,  728,  743,  729,  744,

      730,  731, 1114,  745,  732,  746,  733,  747,  748,  734,
      735,  736,  749,  737,  750,  751,  752,  753,  754,  738,
      741,  742,  755,  756,  743,  757,  744,  758,  739,  740,
      745,  759,  746,  760,  747,  748,  761,  762,  736,  749,
      737,  750,  751,  752,  753,  754,  738,  763,  764,  755,
      756,  765,  757,  766,  758,  739,  740,  767,  759,  768,
      760,  769,  770,  761,  762,  771,  772,  773,  774,  775,
      776,  777,  778,  779,  763,  764,  781,  782,  765,  783,
      766,  784,  785,  786,  767,  787,  768,  788,  769,  770,
      789,  790,  771,  772,  773,  774,  775,  776,  777,  778,

      779,  791,  792,  781,  782,  793,  783,  794,  784,  785,
      786,  795,  787,  796,  788,  797,  798,  789,  790,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  791,  792,
      808,  809,  793,  810,  794,  811,  812,  813,  795,  814,
      796,  815,  797,  798,  816,  817,  799,  800,  801,  802,
      803,  804,  805,  806,  807,  818,  819,  808,  809,  820,
      810,  821,  811,  812,  813,  822,  814,  823,  815,  824,
      825,  816,  817,  826,  827,  828,  829,  830,  831,  832,
      833,  834,  818,  819,  835,  836,  820,  837,  821,  838,
      839,  840,  822,  841,  823,  842,  824,  825,  843,  848,

      826,  827,  828,  829,  830,  831,  832,  833,  834,  849,
      850,  835,  836,  851,  837,  845,  838,  839,  840,  852,
      841,  853,  842,  854,  855,  843,  848,  846,  847,  856,
      857,  858,  859,  860,  861,  863,  849,  850,  864,  865,
      851,  866,  845,  867,  868,  869,  852,  870,  853,  871,
      854,  855,  872,  873,  846,  847,  856,  857,  858,  859,
      860,  861,  863,  874,  875,  864,  865,  876,  866,  877,
      867,  868,  869,  878,  870,  879,  871,  880,  881,  872,
      873,  882,  883,  884,  885,  887,  888,  889,  890,  891,
      874,  875,  892,  893,  876,  894,  877,  895,  896,  897,

      878,  898,  879,  899,  880,  881,  900,  901,  882,  883,
      884,  885,  887,  888,  889,  890,  891,  902,  903,  892,
      893,  904,  894,  905,  895,  896,  897,  906,  898,  907,
      899,  908,  909,  900,  901,  910,  911,  912,  913,  914,
      915,  916,  917,  918,  902,  903,  919,  922,  904,  923,
      905,  920,  921,  924,  906,  925,  907,  927,  908,  909,
      928,  929,  910,  911,  912,  913,  914,  915,  916,  917,
      918,  930,  931,  919,  922,  932,  923,  933,  920,  921,
      924,  934,  925,  935,  927,  936,  937,  928,  929,  938,
      939,  940,  941,  942,  943,  944,  945,  946,  930,  931,

      947, 1114,  932,  953,  933,  954,  955,  956,  934,  957,
      935,  958,  936,  937,  959, 1114,  938,  939,  940,  941,
      942,  943,  944,  945,  946,  960,  961,  947,  948,  962,
      953,  963,  954,  955,  956,  964,  957,  965,  958,  966,
      949,  959,  950,  967,  951,  952,  971,  968,  969,  970,
      972,  973,  960,  961,  974,  948,  962,  975,  963,  976,
      977,  978,  964,  979,  965,  980,  966,  949,  981,  950,
      967,  951,  952,  971,  968,  969,  970,  972,  973,  982,
      983,  974,  985,  986,  975,  987,  976,  977,  978,  988,
      979,  989,  980,  990,  991,  981,  992,  994,  995,  996,

      993,  998,  999, 1000, 1001, 1002,  982,  983,  997,  985,
      986, 1003,  987, 1004, 1005,  844,  988, 1006,  989, 1007,
      990,  991, 1008,  992,  994,  995,  996,  993,  998,  999,
     1000, 1001, 1002, 1009, 1010,  997, 1011, 1012, 1003, 1013,
     1004, 1005,  844, 1014, 1006, 1016, 1007, 1017, 1015, 1008,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1009, 1010, 1028, 1011, 1012, 1029, 1013, 1030, 1031, 1032,
     1014, 1033, 1016, 1034, 1017, 1015, 1035, 1018, 1019, 1020,
     1021, 1022, 1023, 1024, 1025, 1026, 1027, 1036, 1037, 1028,
     1038, 1039, 1029, 1040, 1030, 1031, 1032, 1041, 1033, 1042,

     1034, 1043, 1044, 1035, 1045, 1046, 1047, 1048, 1049, 1050,
     1051, 1052, 1053, 1054, 1036, 1037, 1055, 1038, 1039, 1056,
     1040, 1057, 1058, 1059, 1041, 1060, 1042, 1061, 1043, 1044,
     1062, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1063, 1064, 1055, 1065, 1066, 1056, 1067, 1057, 1058,
     1059, 1068, 1060, 1069, 1061, 1070, 1071, 1062, 1072, 1073,
     1074, 1075, 1076, 1077, 1078, 1080, 1081, 1082, 1063, 1064,
     1083, 1065, 1066, 1084, 1067, 1085, 1087, 1088, 1068, 1089,
     1069, 1090, 1070, 1071, 1091, 1072, 1073, 1074, 1075, 1076,
     1077, 1078, 1080, 1081, 1082, 1092, 1093, 1083, 1094, 1095,

     1084, 1096, 1085, 1087, 1088, 1097, 1089, 1099, 1090, 1100,
     1102, 1091, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111,
     1112, 1113, 1092, 1093, 1114, 1094, 1095, 1114, 1096, 1114,
     1114, 1114, 1097, 1114, 1099, 1114, 1100, 1102, 1114, 1103,
     1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113,   38,
       38,   38,   43,   43,   43,   45,   45,   45,  154, 1114,
      154,  153, 1114,  153,    5, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114
    } ;

static yyconst flex_int16_t yy_chk[2330] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,    3,   21,
        4,   13,   13,   15,   24,   35,   21,   30,   22,   36,
       36,   15,   21,   15,   37,   49,   49,   15,   15,   15,
       15, 1119,   22,   51,   30, 1118,   21, 1104, 1099, 1096,

       15,   24,   35,   21,   30,   22,   36,   36,   15,   21,
       15,   37,   56, 1084,   15,   15,   15,   15,   16,   22,
       51,   30,   16,   26,   52,   16,   31,   26,   16,   57,
       31,   26,   52,   34,   31, 1075,   59,   26,   16,   56,
       31,   53,   34,   59,   34,   16,  936,   34,   60,   16,
       26,   52,   16,   31,   26,   16,   57,   31,   26,   52,
       34,   31,   53,   59,   26,   16,   17,   31,   53,   34,
       59,   34,  853,   17,   34,   60,  797,   17,   64,   61,
       17,   55,   64,   17,   61,   54,   17,  763,   65,   53,
       17,  739,   46,   17,   46,   46,   46,   46,   54,   46,

       17,   55,   46,   58,   17,   64,   61,   17,   55,   64,
       17,   61,   54,   17,   63,   65,   58,   17,   18,   67,
       68,   63,   18,   69,   72,   54,   18,   73,   55,   67,
       58,   74,   18,   75,   76,   18,   68,  653,   66,   66,
       66,   63,   18,   58,   66,   18,   67,   68,   63,   18,
       69,   72,   70,   18,   73,   78,   67,   70,   74,   18,
       75,   76,   18,   68,   77,   66,   66,   66,   79,   18,
       19,   66,   81,   82,   83,   84,   85,   86,   77,   70,
      446,   19,   78,   19,   70,   88,   89,   86,   19,  203,
       80,   77,   80,   19,   45,   79,   80,   19,   43,   81,

       82,   83,   84,   85,   86,   77,   91,   80,   19,   41,
       19,   40,   88,   89,   86,   19,   87,   80,   87,   80,
       19,   20,   90,   80,   93,   20,   95,   97,   92,   20,
       98,  101,   20,   91,   80,   20,   90,   92,   20,   12,
      102,   20,   11,   87,   10,   87,  103,  105,   20,   90,
      106,   93,   20,   95,   97,   92,   20,   98,  101,   20,
      106,  107,   20,   90,   92,   20,   99,  102,   20,   23,
       99,   23,   99,  103,  105,  100,  104,  106,   23,   23,
      100,  104,  108,  104,   23,    9,  109,  106,  107,    8,
      109,  110,  113,   99,  111,  115,   23,   99,   23,   99,

      111,  116,  100,  104,  117,   23,   23,  100,  104,  108,
      104,   23,   27,  109,  112,  112,   27,  109,  110,  113,
       27,  111,  115,  118,  119,  120,   27,  111,  116,  121,
      122,  117,   27,    5,  122,    0,  123,    0,  125,   27,
      122,  112,  112,   27,  126,  127,  128,   27,  130,  131,
      118,  119,  120,   27,    0,  126,  121,  122,  132,   27,
       28,  122,   28,  123,   28,  125,  133,  122,  134,  135,
      136,  126,  127,  128,   28,  130,  131,  137,  138,  139,
       28,   28,  126,  137,  140,  132,  143,   28,    0,   28,
        0,   28,    0,  133,    0,  134,  135,  136,    0,  146,

      150,   28,  145,  146,  137,  138,  139,   28,   28,   29,
      137,  140,  142,  143,  145,   29,  142,   29,  148,   29,
      142,   29,  148,  156,   29,   29,  146,  150,    0,  145,
      146,    0,  142,    0,    0,    0,   29,    0,    0,  142,
        0,  145,   29,  142,   29,  148,   29,  142,   29,  148,
      156,   29,   29,   32,  149,   32,  147,   32,  144,  142,
      144,   32,  147,  144,  149,   32,  157,   32,   32,   32,
      149,  161,   32,   32,  162,  163,  164,   32,    0,  165,
       32,  149,   32,  147,   32,  144,    0,  144,   32,  147,
      144,  149,   32,  157,   32,   32,   32,  149,  161,   32,

       32,  162,  163,  164,   32,   33,  165,  166,  167,  168,
      169,  170,   33,   33,  171,  172,  173,    0,  175,   33,
      176,  154,   33,  154,  154,  154,  154,  174,  154,  174,
      179,  154,   33,    0,  166,  167,  168,  169,  170,   33,
       33,  171,  172,  173,  174,  175,   33,  176,  177,   33,
       71,  178,   71,  180,  174,   71,  174,  179,  180,  180,
      178,   71,  181,  182,  183,  177,  184,   71,   71,   71,
        0,  174,  185,  185,  186,  177,  187,   71,  178,   71,
      180,    0,   71,  189,  191,  180,  180,  178,   71,  181,
      182,  183,  177,  184,   71,   71,   71,   96,  192,  185,

      185,  186,  190,  187,  193,  190,  194,   96,   96,   96,
      189,  191,   96,   96,    0,  195,    0,  197,  198,    0,
        0,  196,  199,  200,   96,  192,  201,  202,  204,  190,
      205,  193,  190,  194,   96,   96,   96,  206,  196,   96,
       96,  124,  195,  124,  197,  198,  124,  124,  196,  199,
      200,  207,  124,  201,  202,  204,  208,  205,  209,  124,
      124,  210,  124,    0,  206,  196,  211,  212,  124,  213,
      124,  214,  215,  124,  124,  216,    0,  217,  207,  124,
      219,    0,    0,  208,  220,  209,  124,  124,  210,  124,
      129,  221,  129,  211,  212,  222,  213,  223,  214,  215,

      224,  129,  216,  129,  217,  225,  226,  219,  129,  129,
      227,  220,  228,  229,  230,  231,  232,  129,  221,  129,
      233,  234,  222,  235,  223,  236,  232,  224,  129,  237,
      129,  238,  225,  226,  239,  129,  129,  227,  240,  228,
      229,  230,  231,  232,  241,  242,  243,  233,  234,  244,
      235,  245,  236,  232,  246,  247,  237,  248,  238,  249,
      251,  239,  250,  252,  254,  240,  256,  247,  257,  258,
      260,  241,  242,  243,  250,  261,  244,  262,  245,  264,
      267,  246,  247,  268,  248,  266,  249,  251,  263,  250,
      252,  254,  265,  256,  247,  257,  258,  260,  266,  263,

      269,  250,  261,  271,  262,  270,  264,  267,  272,  273,
      268,  265,  266,  270,  274,  263,  275,  276,  277,  265,
      278,  279,  280,  281,  282,  266,  263,  269,  283,  284,
      271,  285,  270,  286,  287,  272,  273,  289,  265,  290,
      270,  274,  291,  275,  276,  277,  292,  278,  279,  280,
      281,  282,  294,  293,  294,  283,  284,  295,  285,  296,
      286,  287,  297,  298,  289,  299,  290,  293,  300,  291,
      301,  293,  302,  292,  303,  301,  304,  305,  307,  294,
      293,  294,  308,  306,  295,  306,  296,  309,  310,  297,
      298,  311,  299,  312,  293,  300,  313,  301,  293,  302,

      314,  303,  301,  304,  305,  307,  316,  315,  317,  308,
      306,  315,  306,  318,  309,  310,  319,  320,  311,  321,
      312,  322,  314,  313,  314,  323,  324,  314,  325,  326,
      327,  328,  329,  316,  315,  317,  330,  331,  315,  333,
      318,  335,  336,  319,  320,  339,  321,  340,  322,  314,
      342,  343,  323,  324,  344,  325,  326,  327,  328,  329,
      345,  346,  347,  330,  331,  348,  333,  349,  335,  336,
      350,  351,  339,  353,  340,  354,  355,  342,  343,  357,
      358,  344,  359,  360,  361,  362,  363,  345,  346,  347,
      364,  365,  348,  366,  349,  367,  369,  350,  351,  371,

      353,  373,  354,  355,  374,  375,  357,  358,  376,  359,
      360,  361,  362,  363,  377,  378,  379,  364,  365,  380,
      366,  381,  367,  369,  382,  383,  371,  387,  373,  388,
      389,  374,  375,  390,  391,  376,  394,  395,  396,  397,
      398,  377,  378,  379,  399,  400,  380,  401,  381,  400,
      403,  382,  383,  405,  387,  406,  388,  389,  401,  407,
      390,  391,  408,  394,  395,  396,  397,  398,  411,  412,
      413,  399,  400,  414,  401,  415,  400,  403,  416,  417,
      405,  418,  406,  419,  420,  401,  407,  421,  422,  408,
      423,  424,  427,  428,  431,  411,  412,  413,  432,  433,

      414,  434,  415,  435,  436,  416,  417,  437,  418,  438,
      419,  420,  439,  440,  421,  422,  441,  423,  424,  427,
      428,  431,  442,  444,  445,  432,  433,  447,  434,  448,
      435,  436,  449,  450,  437,  451,  438,  454,  452,  439,
      440,  455,  456,  441,  457,  458,  459,  460,  461,  442,
      444,  445,  462,  464,  447,  465,  448,  452,  466,  449,
      450,  467,  451,  468,  454,  452,  469,  470,  455,  456,
      471,  457,  458,  459,  460,  461,  472,  473,  476,  462,
      464,  477,  465,  478,  452,  466,  479,  481,  467,  475,
      468,  482,  483,  469,  470,  484,  475,  471,  485,  486,

      487,  489,  490,  472,  473,  476,  491,  492,  477,  493,
      478,  494,  493,  479,  481,  495,  475,  496,  482,  483,
      497,  498,  484,  475,  499,  485,  486,  487,  489,  490,
      499,  501,  504,  491,  492,  505,  493,  506,  494,  493,
      507,  509,  495,  510,  496,  511,  512,  497,  498,  513,
      514,  499,  515,  518,  519,  520,  521,  499,  501,  504,
      522,  523,  505,  524,  506,  525,  527,  507,  509,  528,
      510,  530,  511,  512,  531,  532,  513,  514,  533,  515,
      518,  519,  520,  521,  534,  536,  537,  522,  523,  538,
      524,  539,  525,  527,  540,  541,  528,  542,  530,  543,

      544,  531,  532,  545,  546,  533,  547,  548,  551,  553,
      554,  534,  536,  537,  555,  557,  538,  558,  539,  559,
      560,  540,  541,  561,  542,  565,  543,  544,  566,  567,
      545,  546,  569,  547,  548,  551,  553,  554,  570,  572,
      568,  555,  557,  568,  558,  573,  559,  560,  574,  576,
      561,  578,  565,  579,  580,  566,  567,  581,  583,  569,
      584,  585,  588,  589,  592,  570,  572,  568,  593,  594,
      568,  595,  573,  596,  597,  574,  576,  598,  578,  599,
      579,  580,  602,  603,  581,  583,    0,  584,  585,  588,
      589,  592,    0,  605,  606,  593,  594,  607,  595,  608,

      596,  597,    0,  610,  598,  611,  599,  612,  613,  602,
      603,  604,  614,  604,  615,  616,  617,  618,  619,  604,
      605,  606,  620,  621,  607,  622,  608,  623,  604,  604,
      610,  624,  611,  626,  612,  613,  627,  628,  604,  614,
      604,  615,  616,  617,  618,  619,  604,  629,  631,  620,
      621,  632,  622,  633,  623,  604,  604,  634,  624,  636,
      626,  637,  639,  627,  628,  640,  641,  642,  645,  646,
      647,  648,  649,  650,  629,  631,  654,  655,  632,  656,
      633,  657,  658,  659,  634,  661,  636,  662,  637,  639,
      665,  667,  640,  641,  642,  645,  646,  647,  648,  649,

      650,  668,  669,  654,  655,  672,  656,  673,  657,  658,
      659,  674,  661,  675,  662,  677,  679,  665,  667,  680,
      681,  682,  684,  685,  686,  687,  689,  690,  668,  669,
      691,  694,  672,  696,  673,  698,  699,  701,  674,  703,
      675,  704,  677,  679,  705,  706,  680,  681,  682,  684,
      685,  686,  687,  689,  690,  708,  709,  691,  694,  710,
      696,  711,  698,  699,  701,  712,  703,  713,  704,  714,
      715,  705,  706,  719,  721,  722,  723,  724,  725,  727,
      728,  729,  708,  709,  730,  731,  710,  732,  711,  733,
      734,  735,  712,  736,  713,  737,  714,  715,  738,  741,

      719,  721,  722,  723,  724,  725,  727,  728,  729,  743,
      745,  730,  731,  747,  732,  740,  733,  734,  735,  752,
      736,  753,  737,  754,  755,  738,  741,  740,  740,  756,
      757,  758,  759,  761,  762,  764,  743,  745,  765,  766,
      747,  767,  740,  768,  769,  771,  752,  775,  753,  776,
      754,  755,  777,  778,  740,  740,  756,  757,  758,  759,
      761,  762,  764,  779,  780,  765,  766,  783,  767,  784,
      768,  769,  771,  785,  775,  786,  776,  787,  790,  777,
      778,  791,  794,  795,  796,  798,  802,  803,  804,  805,
      779,  780,  808,  810,  783,  812,  784,  813,  814,  815,

      785,  816,  786,  817,  787,  790,  819,  820,  791,  794,
      795,  796,  798,  802,  803,  804,  805,  821,  822,  808,
      810,  825,  812,  826,  813,  814,  815,  827,  816,  828,
      817,  831,  832,  819,  820,  833,  834,  835,  838,  839,
      840,  841,  842,  843,  821,  822,  845,  847,  825,  850,
      826,  846,  846,  851,  827,  852,  828,  855,  831,  832,
      856,  857,  833,  834,  835,  838,  839,  840,  841,  842,
      843,  858,  859,  845,  847,  860,  850,  861,  846,  846,
      851,  862,  852,  863,  855,  864,  865,  856,  857,  866,
      873,  874,  875,  878,  879,  880,  882,  883,  858,  859,

      885,    0,  860,  887,  861,  889,  890,  897,  862,  898,
      863,  899,  864,  865,  900,    0,  866,  873,  874,  875,
      878,  879,  880,  882,  883,  902,  904,  885,  886,  910,
      887,  911,  889,  890,  897,  912,  898,  913,  899,  914,
      886,  900,  886,  915,  886,  886,  917,  915,  916,  916,
      918,  919,  902,  904,  924,  886,  910,  925,  911,  926,
      928,  929,  912,  931,  913,  932,  914,  886,  933,  886,
      915,  886,  886,  917,  915,  916,  916,  918,  919,  934,
      935,  924,  938,  941,  925,  942,  926,  928,  929,  943,
      931,  944,  932,  946,  947,  933,  948,  949,  950,  951,

      948,  952,  953,  954,  955,  958,  934,  935,  951,  938,
      941,  961,  942,  967,  968,  971,  943,  972,  944,  973,
      946,  947,  976,  948,  949,  950,  951,  948,  952,  953,
      954,  955,  958,  977,  978,  951,  979,  980,  961,  982,
      967,  968,  971,  984,  972,  985,  973,  986,  984,  976,
      989,  991,  992,  993,  994,  995,  996,  997,  998, 1000,
      977,  978, 1002,  979,  980, 1003,  982, 1005, 1006, 1008,
      984, 1009,  985, 1010,  986,  984, 1012,  989,  991,  992,
      993,  994,  995,  996,  997,  998, 1000, 1013, 1014, 1002,
     1015, 1016, 1003, 1017, 1005, 1006, 1008, 1018, 1009, 1019,

     1010, 1020, 1021, 1012, 1022, 1023, 1024, 1025, 1026, 1027,
     1029, 1031, 1032, 1033, 1013, 1014, 1034, 1015, 1016, 1037,
     1017, 1038, 1040, 1041, 1018, 1042, 1019, 1044, 1020, 1021,
     1047, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1031, 1032,
     1033, 1048, 1050, 1034, 1051, 1052, 1037, 1056, 1038, 1040,
     1041, 1057, 1042, 1061, 1044, 1062, 1063, 1047, 1065, 1066,
     1068, 1069, 1070, 1071, 1074, 1076, 1077, 1079, 1048, 1050,
     1080, 1051, 1052, 1081, 1056, 1082, 1085, 1086, 1057, 1087,
     1061, 1088, 1062, 1063, 1089, 1065, 1066, 1068, 1069, 1070,
     1071, 1074, 1076, 1077, 1079, 1090, 1091, 1080, 1092, 1093,

     1081, 1094, 1082, 1085, 1086, 1095, 1087, 1097, 1088, 1098,
     1100, 1089, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109,
     1110, 1112, 1090, 1091,    0, 1092, 1093,    0, 1094,    0,
        0,    0, 1095,    0, 1097,    0, 1098, 1100,    0, 1101,
     1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1115,
     1115, 1115, 1116, 1116, 1116, 1117, 1117, 1117, 1120,    0,
     1120, 1121,    0, 1121, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int sqlcodeYY_flex_debug;
int sqlcodeYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *sqlcodeYYtext;
#line 1 "sqlcode.l"
/******************************************************************************
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 20 "sqlcode.l"

#include <stdio.h>

#include "sqlcode.h"

#include "entry.h"
#include "doxygen.h"
#include "outputlist.h"
#include "util.h"
#include "membername.h"
#include "searchindex.h"
#include "config.h"
#include "filedef.h"
#include "tooltip.h"

#define YY_NEVER_INTERACTIVE 1
#define YY_NO_INPUT 1
#define YY_NO_UNISTD_H 1

static CodeOutputInterface * g_code;
static QCString      g_curClassName;
static QCString      g_parmType;
static QCString      g_parmName;
static const char *  g_inputString;     //!< the code fragment as text
static int           g_inputPosition;   //!< read offset during parsing 
static int           g_inputLines;      //!< number of line in the code fragment
static int           g_yyLineNr;        //!< current line number
static bool          g_needsTermination;
static Definition   *g_searchCtx;

static bool          g_exampleBlock;
static QCString      g_exampleName;
static QCString      g_exampleFile;

static QCString      g_type;
static QCString      g_name;
static QCString      g_args;
static QCString      g_classScope;
   
static QCString      g_CurrScope;
   
static FileDef *     g_sourceFileDef;
static Definition *  g_currentDefinition;
static MemberDef *   g_currentMemberDef;
static bool          g_includeCodeFragment;
static const char *  g_currentFontClass;

static void codify(const char* text) 
{ 
  g_code->codify(text);
}

static void setCurrentDoc(const QCString &anchor)
{
  if (Doxygen::searchIndex)
  {
    if (g_searchCtx)
    {
      Doxygen::searchIndex->setCurrentDoc(g_searchCtx,g_searchCtx->anchor(),FALSE);
    }
    else
    {
      Doxygen::searchIndex->setCurrentDoc(g_sourceFileDef,anchor,TRUE);
    }
  }
}

/*! start a new line of code, inserting a line number if g_sourceFileDef
 * is TRUE. If a definition starts at the current line, then the line
 * number is linked to the documentation of that definition.
 */
static void startCodeLine()
{
  if (g_sourceFileDef)
  {   
    Definition *d   = g_sourceFileDef->getSourceDefinition(g_yyLineNr);
    
    if (!g_includeCodeFragment && d && d->isLinkableInProject())
    {
      g_currentDefinition = d;
      g_currentMemberDef = g_sourceFileDef->getSourceMember(g_yyLineNr);
      g_classScope = d->name().copy();
      QCString lineAnchor;
      lineAnchor.sprintf("l%05d",g_yyLineNr);
      if (g_currentMemberDef)
      {
        g_code->writeLineNumber(g_currentMemberDef->getReference(),
                            g_currentMemberDef->getOutputFileBase(),
                            g_currentMemberDef->anchor(),g_yyLineNr);
        setCurrentDoc(lineAnchor);
      }
      else
      {
        g_code->writeLineNumber(d->getReference(),
                            d->getOutputFileBase(),
                            0,g_yyLineNr);
        setCurrentDoc(lineAnchor);
      }
    }
    else
    {
      g_code->writeLineNumber(0,0,0,g_yyLineNr);
    }
  }
  
  g_code->startCodeLine(g_sourceFileDef);
  
  if (g_currentFontClass)
  {
    g_code->startFontClass(g_currentFontClass);
  }
}

static void endFontClass()
{
  if (g_currentFontClass)
  {
    g_code->endFontClass();
    g_currentFontClass=0;
  }
}

static void endCodeLine()
{
  endFontClass();
  g_code->endCodeLine();
}

static void nextCodeLine()
{
  const char *fc = g_currentFontClass;
  endCodeLine();
  if (g_yyLineNr<g_inputLines) 
  {
    g_currentFontClass = fc;
    startCodeLine();
  }
}

static void codifyLines(char *text)
{
  char *p=text,*sp=p;
  char c;
  bool done=FALSE;
  
  while (!done)
  {
    sp=p;
    
    while ((c=*p++) && c!='\n') { }
    
    if (c=='\n')
    {
      g_yyLineNr++;
      *(p-1)='\0';
      g_code->codify(sp);
      nextCodeLine();
    }
    else
    {
      g_code->codify(sp);
      done=TRUE;
    }
  }
}

static void startFontClass(const char *s)
{
  endFontClass();
  g_code->startFontClass(s);
  g_currentFontClass=s;
}

/*! counts the number of lines in the input */
static int countLines()
{
  const char *p=g_inputString;
  char c;
  int count=1;
  while ((c=*p)) 
  { 
    p++ ; 
    if (c=='\n') count++;  
  }
  if (p>g_inputString && *(p-1)!='\n') 
  { // last line does not end with a \n, so we add an extra
    // line and explicitly terminate the line after parsing.
    count++, 
    g_needsTermination=TRUE; 
  } 
  return count;
}

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  while( c < max_size && g_inputString[g_inputPosition] )
  {
    *buf = g_inputString[g_inputPosition++] ;
    c++; buf++;
  }
  return c;
}

/* Need multiple keyword definitions due to max length */

#line 1596 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/sqlcode.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int sqlcodeYYlex_destroy (void );

int sqlcodeYYget_debug (void );

void sqlcodeYYset_debug (int debug_flag  );

YY_EXTRA_TYPE sqlcodeYYget_extra (void );

void sqlcodeYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *sqlcodeYYget_in (void );

void sqlcodeYYset_in  (FILE * _in_str  );

FILE *sqlcodeYYget_out (void );

void sqlcodeYYset_out  (FILE * _out_str  );

yy_size_t sqlcodeYYget_leng (void );

char *sqlcodeYYget_text (void );

int sqlcodeYYget_lineno (void );

void sqlcodeYYset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int sqlcodeYYwrap (void );
#else
extern int sqlcodeYYwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( sqlcodeYYtext, sqlcodeYYleng, 1, sqlcodeYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( sqlcodeYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( sqlcodeYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, sqlcodeYYin))==0 && ferror(sqlcodeYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(sqlcodeYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int sqlcodeYYlex (void);

#define YY_DECL int sqlcodeYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after sqlcodeYYtext and sqlcodeYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! sqlcodeYYin )
			sqlcodeYYin = stdin;

		if ( ! sqlcodeYYout )
			sqlcodeYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			sqlcodeYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				sqlcodeYY_create_buffer(sqlcodeYYin,YY_BUF_SIZE );
		}

		sqlcodeYY_load_buffer_state( );
		}

	{
#line 269 "sqlcode.l"


#line 1816 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/sqlcode.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of sqlcodeYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1115 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1114 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 271 "sqlcode.l"
{
                        startFontClass("stringliteral");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 278 "sqlcode.l"
{
                        startFontClass("keyword");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 284 "sqlcode.l"
{
                        startFontClass("keywordflow");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 290 "sqlcode.l"
{
                        startFontClass("keywordtype");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 296 "sqlcode.l"
{
                        startFontClass("preprocessor");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 302 "sqlcode.l"
{
                        startFontClass("comment");
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 308 "sqlcode.l"
{
                        startFontClass("comment");
                        codifyLines(sqlcodeYYtext);
                        BEGIN(COMMENT);
                    }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 314 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                    }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 317 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 321 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                        endFontClass();
                        BEGIN(INITIAL);
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 327 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                    }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 331 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 335 "sqlcode.l"
{
                        codifyLines(sqlcodeYYtext);
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 339 "sqlcode.l"
ECHO;
	YY_BREAK
#line 1984 "/Users/vsg111/Dropbox/Work/Papers/Paper_EEM_Computational/EEM_Dynamic/third-party-libs/doxygen-1.8.13/build/generated_src/sqlcode.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed sqlcodeYYin at a new source and called
			 * sqlcodeYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = sqlcodeYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( sqlcodeYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * sqlcodeYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of sqlcodeYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					sqlcodeYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			sqlcodeYYrestart(sqlcodeYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) sqlcodeYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1115 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1115 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1114);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					sqlcodeYYrestart(sqlcodeYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( sqlcodeYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve sqlcodeYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void sqlcodeYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        sqlcodeYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            sqlcodeYY_create_buffer(sqlcodeYYin,YY_BUF_SIZE );
	}

	sqlcodeYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	sqlcodeYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void sqlcodeYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		sqlcodeYYpop_buffer_state();
	 *		sqlcodeYYpush_buffer_state(new_buffer);
     */
	sqlcodeYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	sqlcodeYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (sqlcodeYYwrap()) processing, but the only time this flag
	 * is looked at is after sqlcodeYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void sqlcodeYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	sqlcodeYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE sqlcodeYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) sqlcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYY_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) sqlcodeYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	sqlcodeYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with sqlcodeYY_create_buffer()
 * 
 */
    void sqlcodeYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		sqlcodeYYfree((void *) b->yy_ch_buf  );

	sqlcodeYYfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a sqlcodeYYrestart() or at EOF.
 */
    static void sqlcodeYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	sqlcodeYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then sqlcodeYY_init_buffer was _probably_
     * called from sqlcodeYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void sqlcodeYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		sqlcodeYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void sqlcodeYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	sqlcodeYYensure_buffer_stack();

	/* This block is copied from sqlcodeYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from sqlcodeYY_switch_to_buffer. */
	sqlcodeYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void sqlcodeYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	sqlcodeYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		sqlcodeYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void sqlcodeYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; // After all that talk, this was set to 1 anyways...
		(yy_buffer_stack) = (struct yy_buffer_state**)sqlcodeYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)sqlcodeYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE sqlcodeYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) sqlcodeYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	sqlcodeYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to sqlcodeYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       sqlcodeYY_scan_bytes() instead.
 */
YY_BUFFER_STATE sqlcodeYY_scan_string (yyconst char * yystr )
{
    
	return sqlcodeYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to sqlcodeYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE sqlcodeYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) sqlcodeYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in sqlcodeYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = sqlcodeYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in sqlcodeYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up sqlcodeYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		sqlcodeYYtext[sqlcodeYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = sqlcodeYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		sqlcodeYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int sqlcodeYYget_lineno  (void)
{
        
    return sqlcodeYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *sqlcodeYYget_in  (void)
{
        return sqlcodeYYin;
}

/** Get the output stream.
 * 
 */
FILE *sqlcodeYYget_out  (void)
{
        return sqlcodeYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t sqlcodeYYget_leng  (void)
{
        return sqlcodeYYleng;
}

/** Get the current token.
 * 
 */

char *sqlcodeYYget_text  (void)
{
        return sqlcodeYYtext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void sqlcodeYYset_lineno (int  _line_number )
{
    
    sqlcodeYYlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see sqlcodeYY_switch_to_buffer
 */
void sqlcodeYYset_in (FILE *  _in_str )
{
        sqlcodeYYin = _in_str ;
}

void sqlcodeYYset_out (FILE *  _out_str )
{
        sqlcodeYYout = _out_str ;
}

int sqlcodeYYget_debug  (void)
{
        return sqlcodeYY_flex_debug;
}

void sqlcodeYYset_debug (int  _bdebug )
{
        sqlcodeYY_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from sqlcodeYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    sqlcodeYYin = stdin;
    sqlcodeYYout = stdout;
#else
    sqlcodeYYin = (FILE *) 0;
    sqlcodeYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * sqlcodeYYlex_init()
     */
    return 0;
}

/* sqlcodeYYlex_destroy is for both reentrant and non-reentrant scanners. */
int sqlcodeYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		sqlcodeYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		sqlcodeYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	sqlcodeYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * sqlcodeYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *sqlcodeYYalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *sqlcodeYYrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void sqlcodeYYfree (void * ptr )
{
			free( (char *) ptr );	/* see sqlcodeYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 339 "sqlcode.l"



void parseSqlCode(
    CodeOutputInterface &od,
    const char * /*className*/,
    const QCString &s,
    bool exBlock,
    const char *exName,
    FileDef *fd,
    int startLine,
    int endLine,
    bool inlineFragment,
    MemberDef *,
    bool,Definition *searchCtx,
    bool /*collectXRefs*/
    ) 
{  
  if (s.isEmpty()) return;
  
  TooltipManager::instance()->clearTooltips();
  
  g_code = &od;
  g_inputString   = s;
  g_inputPosition = 0;
  g_currentFontClass = 0;
  g_needsTermination = FALSE;
  g_searchCtx=searchCtx;
  
  if (startLine!=-1)
    g_yyLineNr    = startLine;
  else
    g_yyLineNr    = 1;
  
  if (endLine!=-1)
    g_inputLines  = endLine+1;
  else
    g_inputLines  = g_yyLineNr + countLines() - 1;
  
  g_exampleBlock  = exBlock; 
  g_exampleName   = exName;
  g_sourceFileDef = fd;

  bool cleanupSourceDef = FALSE;
  
  if (exBlock && fd==0)
  {
    // create a dummy filedef for the example
    g_sourceFileDef = new FileDef("",(exName?exName:"generated"));
    cleanupSourceDef = TRUE;
  }
  
  if (g_sourceFileDef) 
  {
    setCurrentDoc("l00001");
  }

  g_includeCodeFragment = inlineFragment;
  // Starts line 1 on the output  
  startCodeLine();

  sqlcodeYYrestart( sqlcodeYYin );

  sqlcodeYYlex();

  if (g_needsTermination)
  {
    endCodeLine();
  }
  if (fd)
  {
    TooltipManager::instance()->writeTooltips(*g_code);
  }
  if (cleanupSourceDef)
  {
    // delete the temporary file definition used for this example
    delete g_sourceFileDef;
    g_sourceFileDef=0;
  }
  
  return;
}

void resetSqlCodeParserState() 
{
  g_currentDefinition = 0;
  g_currentMemberDef = 0;
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
  void sqlcodeYYdummy() { yy_flex_realloc(0,0); } 
}
#elif YY_FLEX_MAJOR_VERSION<=2 && YY_FLEX_MINOR_VERSION<=5 && YY_FLEX_SUBMINOR_VERSION<33
#error "You seem to be using a version of flex newer than 2.5.4. These are currently incompatible with 2.5.4, and do NOT work with doxygen! Please use version 2.5.4 or expect things to be parsed wrongly! A bug report has been submitted (#732132)."
#endif


